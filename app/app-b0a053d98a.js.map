{"version":3,"sources":["app/app.module.js","app/services/user/user.service.js","app/services/profiles/profile.service.js","app/services/profiles/page-ribbon.directive.js","app/services/auth/sessions.service.js","app/services/auth/register.service.js","app/services/auth/principal.service.js","app/services/auth/password-reset-init.service.js","app/services/auth/password-reset-finish.service.js","app/services/auth/password.service.js","app/services/auth/has-authority.directive.js","app/services/auth/has-any-authority.directive.js","app/services/auth/auth.session.service.js","app/services/auth/auth.service.js","app/services/auth/activate.service.js","app/services/auth/account.service.js","app/layouts/navbar/navbar.controller.js","app/layouts/navbar/active-menu.directive.js","app/layouts/error/error.state.js","app/home/home.state.js","app/home/home.controller.js","app/entities/entity.state.js","app/components/util/truncate-words.filter.js","app/components/util/truncate-characters.filter.js","app/components/util/sort-by.directive.js","app/components/util/sort.directive.js","app/components/util/parse-links.service.js","app/components/util/pagination-util.service.js","app/components/util/jhi-item-count.directive.js","app/components/util/date-util.service.js","app/components/util/data-util.service.js","app/components/util/capitalize.filter.js","app/components/util/base64.service.js","app/components/login/login.service.js","app/components/login/login.controller.js","app/components/language/language.service.js","app/components/language/language.filter.js","app/components/language/language.controller.js","app/components/language/language.constants.js","app/components/form/show-validation.directive.js","app/components/form/pagination.constants.js","app/components/form/minbytes.directive.js","app/components/form/maxbytes.directive.js","app/components/alert/alert-error.directive.js","app/components/alert/alert.service.js","app/components/alert/alert.directive.js","app/calories/modal/calories.modal.service.js","app/calories/modal/calories.modal.controller.js","app/calories/delete/user-calories-delete-dialog.controller.js","app/calories/calories.state.js","app/calories/calories.service.js","app/calories/calories.controller.js","app/blocks/interceptor/notification.interceptor.js","app/blocks/interceptor/errorhandler.interceptor.js","app/blocks/interceptor/auth-expired.interceptor.js","app/blocks/handlers/translation.handler.js","app/blocks/handlers/state.handler.js","app/blocks/config/uib-pagination.config.js","app/blocks/config/uib-pager.config.js","app/blocks/config/translation-storage.provider.js","app/blocks/config/translation.config.js","app/blocks/config/localstorage.config.js","app/blocks/config/http.config.js","app/blocks/config/compile.config.js","app/blocks/config/bootstrap-material.config.js","app/blocks/config/alert.config.js","app/app.state.js","app/app.constants.js","app/admin/user-management/user-management-dialog.controller.js","app/admin/user-management/user-management-detail.controller.js","app/admin/user-management/user-management-delete-dialog.controller.js","app/admin/user-management/user-management.state.js","app/admin/user-management/user-management.controller.js","app/admin/docs/docs.state.js","app/admin/admin.state.js","app/account/settings/settings.state.js","app/account/settings/settings.controller.js","app/account/reset/request/reset.request.state.js","app/account/reset/request/reset.request.controller.js","app/account/reset/finish/reset.finish.state.js","app/account/reset/finish/reset.finish.controller.js","app/account/register/register.state.js","app/account/register/register.controller.js","app/account/password/password-strength-bar.directive.js","app/account/password/password.state.js","app/account/password/password.controller.js","app/account/activate/activate.state.js","app/account/activate/activate.controller.js","app/account/account.state.js","app/app.js"],"names":["run","stateHandler","translationHandler","initialize","angular","module","$inject","User","$resource","service","query","method","isArray","get","transformResponse","data","fromJson","save","update","delete","factory","ProfileService","$http","getProfileInfo","isUndefined","dataPromise","then","result","activeProfiles","response","ribbonEnv","inProduction","indexOf","swaggerEnabled","pageRibbon","$rootScope","$translate","linkFunc","scope","element","attrs","addClass","removeClass","directive","replace","restrict","template","link","Sessions","getAll","Register","Principal","$q","Account","authenticate","identity","_identity","_authenticated","hasAnyAuthority","authorities","i","length","hasAuthority","authority","this","_id","when","force","getAccountThen","account","deferred","resolve","getAccountCatch","defer","undefined","isDefined","promise","$promise","catch","isAuthenticated","isIdentityResolved","PasswordResetInit","PasswordResetFinish","Password","setVisible","setHidden","defineVisibility","reset","$watch","$on","split","AuthServerProvider","$localStorage","getToken","token","authenticationToken","hasValidToken","login","credentials","encodeURIComponent","username","password","rememberMe","post","headers","Content-Type","success","logout","Auth","$state","$sessionStorage","LoginService","Activate","activateAccount","key","callback","cb","noop","err","bind","authorize","authThen","toState","parent","name","go","reload","storePreviousState","toStateParams","open","authReturn","changePassword","newPassword","createAccount","loginThen","use","langKey","refresh","reject","resetPasswordFinish","keyAndPassword","resetPasswordInit","mail","updateAccount","getPreviousState","previousState","resetPreviousState","previousStateName","previousStateParams","params","interceptor","NavbarController","collapseNavbar","toggleNavbar","vm","isNavbarCollapsed","goHome","goToMyCalories","controller","activeMenu","$locale","tmhDynamicLocale","language","selectedLanguage","set","stateConfig","$stateProvider","state","url","pageTitle","views","content@","templateUrl","mainTranslatePartialLoader","$translatePartialLoader","addPart","config","controllerAs","HomeController","$scope","getAccount","performRedirection","register","abstract","words","wordsFilter","input","isNaN","inputWords","slice","join","filter","characters","charactersFilter","chars","breakOnWord","substring","charAt","substr","lastspace","lastIndexOf","jhSortBy","parentCtrl","sort","require","jhSort","predicate","ascending","SortController","bindToController","$element","applyClass","thisIcon","find","sortIcon","sortAsc","sortDesc","remove","add","resetClasses","allThIcons","field","$apply","triggerApply","values","$watchGroup","ParseLinks","parse","header","Error","parts","links","forEach","p","section","trim","queryString","RegExp","$0","$1","$2","$3","page","isString","parseInt","PaginationUtil","parseAscending","sortArray","parsePage","parsePredicate","pop","jhiItemCount","bindings","queryCount","itemsPerPage","component","DateUtils","$filter","convertDateTimeFromServer","date","Date","convertLocalDateFromServer","dateString","convertLocalDateToServer","dateformat","DataUtils","$window","abbreviate","text","byteSize","base64String","endsWith","suffix","str","paddingSize","size","formatAsBytes","toString","openFile","type","toBase64","file","fileReader","FileReader","readAsDataURL","onload","e","base64Data","target","capitalize","capitalizeFilter","toLowerCase","toUpperCase","Base64","encode","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","charCodeAt","keyStr","decode","String","fromCharCode","LoginController","$timeout","cancel","authenticationError","event","preventDefault","$broadcast","requestResetPassword","focus","JhiLanguageService","LANGUAGES","getCurrent","storage","findLanguageFromKey","findLanguageFromKeyFilter","lang","ca","cs","da","de","el","en","es","et","fr","gl","hu","hi","it","ja","ko","mr","nl","pl","pt-br","pt-pt","ro","ru","sk","sr","sv","ta","tr","vi","zh-cn","zh-tw","JhiLanguageController","changeLanguage","languageKey","languages","constant","showValidation","formCtrl","each","$formGroup","$inputs","$input","inputName","attr","$invalid","$dirty","isInvalid","toggleClass","minbytes","ngModel","$validators","modelValue","$isEmpty","numberOfBytes","maxbytes","jhiAlertErrorController","AlertService","addErrorAlert","message","alerts","push","msg","timeout","toast","isToast","scoped","cleanHttpErrorListener","httpResponse","stopPropagation","status","Object","keys","errorHeader","entityKey","entityName","instant","fieldErrors","fieldError","convertedField","fieldName","objectName","toJson","jhiAlertError","getService","$sce","clear","position","error","warning","info","alertOptions","alert","trustAsHtml","id","alertId","close","closeAlert","addAlert","extAlerts","that","thisAlerts","closeAlertByIndex","map","index","splice","$get","showAsToast","provider","jhiAlertController","jhiAlert","CaloriesModalService","$uibModal","aMealInformation","modalInstance","animation","backdrop","translatePartialLoader","mealInformation","resetModal","resetModalOnClose","CaloriesModalController","$uibModalInstance","$stateParams","CaloriesService","init","calories","description","time","getTime","aTimeInMs","lNbHours","lNbMinutes","lDate","setHours","setMinutes","setSeconds","setMilliseconds","onSaveSuccess","isSaving","onSaveFailure","editionOrCreationError","credentialsToSend","userLogin","Number","lTime","getHours","getMinutes","dismiss","UserCaloriesDeleteController","confirmDelete","mealInformationId","idMealInformation","idMealInfo","caloriesConfig","value","squash","fromDate","toDate","fromTime","toTime","pagingParams","lSortParam","onEnter","CaloriesController","paginationConstants","isSameUser","dailyCaloriesLimit","editMealInformation","openMealModal","loadAll","isListMealsInformationLoading","filterInformationForQuery","beginDate","endDate","beginTime","endTime","onSuccess","onError","clearFilter","transitionTo","$current","reverse","loadMealsInformationByFilter","filterErrorMessageToDisplay","isFilterProcessing","lBeginDate","filterInformationForScreen","lEndDate","lBeginTime","lEndTime","checkLimit","aDate","listCaloriesPerDay","lMealInformation","timeToDisplay","listInformationByDate","nbElts","lInformationByDate","mealInformationsSimpleList","totalItems","loadPage","transition","notificationInterceptor","alertKey","param","errorHandlerInterceptor","responseError","path","$emit","authExpiredInterceptor","$injector","to","translateChangeSuccess","updateTitle","titleKey","title","document","VERSION","stateChangeStart","fromState","external","stateChangeSuccess","toParams","fromParams","paginationConfig","uibPaginationConfig","maxSize","boundaryLinks","firstText","previousText","nextText","lastText","pagerConfig","uibPagerConfig","translationStorageProvider","$cookies","$log","getObject","putObject","put","translationConfig","$translateProvider","tmhDynamicLocaleProvider","useLoader","urlTemplate","preferredLanguage","useStorage","useSanitizeValueStrategy","addInterpolation","localeLocationPattern","useCookieStorage","storageKey","localStorageConfig","$localStorageProvider","$sessionStorageProvider","setKeyPrefix","httpConfig","$urlRouterProvider","$httpProvider","httpRequestInterceptorCacheBusterProvider","$urlMatcherFactoryProvider","setMatchlist","otherwise","interceptors","val","equals","a","b","is","pattern","compileServiceConfig","$compileProvider","DEBUG_INFO_ENABLED","debugInfoEnabled","bootstrapMaterialDesignConfig","$","material","alertServiceConfig","AlertServiceProvider","navbar@","UserManagementDialogController","entity","onSaveError","user","UserManagementDetailController","load","UserManagementDeleteController","firstName","lastName","email","activated","createdBy","createdDate","lastModifiedBy","lastModifiedDate","resetDate","resetKey","UserManagementController","setActive","isActivated","users","search","currentSearch","editUserMealsInformation","aUserLogin","currentAccount","SettingsController","settingsAccount","copyAccount","current","RequestResetController","requestReset","errorEmailNotExists","resetAccount","ResetFinishController","finishReset","doNotMatch","confirmPassword","keyMissing","RegisterController","registerAccount","errorUserExists","errorEmailExists","passwordStrengthBar","iElement","strength","colors","mesureStrength","_force","_regex","_lowerLetters","test","_upperLetters","_numbers","_symbols","_flags","_passedMatches","grep","Math","min","getColor","s","idx","col","c","children","css","background-color","passwordToCheck","PasswordController","ActivationController","$templateCache"],"mappings":"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","file":"app/app-b0a053d98a.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp', [\n                'ngStorage',\n                'tmh.dynamicLocale',\n                'pascalprecht.translate',\n                'ngResource',\n                'ngCookies',\n                'ngAria',\n                'ngCacheBuster',\n                'ngFileUpload',\n                'ui.bootstrap',\n                'ui.bootstrap.datetimepicker',\n                'ui.router',\n                'infinite-scroll',\n                // jhipster-needle-angularjs-add-module JHipster will add new module here\n                'angular-loading-bar',\n                'angularSpinner'\n            ])\n            .run(run);\n\n    run.$inject = ['stateHandler', 'translationHandler'];\n\n    function run(stateHandler, translationHandler) {\n        stateHandler.initialize();\n        translationHandler.initialize();\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('User', User);\n\n    User.$inject = ['$resource'];\n\n    function User ($resource) {\n        var service = $resource('api/users/:login', {}, {\n            'query': {method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'save': { method:'POST' },\n            'update': { method:'PUT' },\n            'delete':{ method:'DELETE'}\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('ProfileService', ProfileService);\n\n    ProfileService.$inject = ['$http'];\n\n    function ProfileService($http) {\n\n        var dataPromise;\n\n        var service = {\n            getProfileInfo : getProfileInfo\n        };\n\n        return service;\n\n        function getProfileInfo() {\n            if (angular.isUndefined(dataPromise)) {\n                dataPromise = $http.get('api/profile-info').then(function(result) {\n                    if (result.data.activeProfiles) {\n                        var response = {};\n                        response.activeProfiles = result.data.activeProfiles;\n                        response.ribbonEnv = result.data.ribbonEnv;\n                        response.inProduction = result.data.activeProfiles.indexOf(\"prod\") !== -1;\n                        response.swaggerEnabled = result.data.activeProfiles.indexOf(\"swagger\") !== -1;\n                        return response;\n                    }\n                });\n            }\n            return dataPromise;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .directive('pageRibbon', pageRibbon);\n\n    pageRibbon.$inject = ['ProfileService', '$rootScope', '$translate'];\n\n    function pageRibbon(ProfileService, $rootScope, $translate) {\n        var directive = {\n            replace : true,\n            restrict : 'AE',\n            template : '<div class=\"ribbon hidden\"><a href=\"\" translate=\"global.ribbon.{{ribbonEnv}}\">{{ribbonEnv}}</a></div>',\n            link : linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            ProfileService.getProfileInfo().then(function(response) {\n                if (response.ribbonEnv) {\n                    scope.ribbonEnv = response.ribbonEnv;\n                    element.addClass(response.ribbonEnv);\n                    element.removeClass('hidden');\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('Sessions', Sessions);\n\n    Sessions.$inject = ['$resource'];\n\n    function Sessions ($resource) {\n        return $resource('api/account/sessions/:series', {}, {\n            'getAll': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('Register', Register);\n\n    Register.$inject = ['$resource'];\n\n    function Register ($resource) {\n        return $resource('api/register', {}, {});\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .factory('Principal', Principal);\n\n    Principal.$inject = ['$q', 'Account'];\n\n    function Principal($q, Account) {\n        var _identity,\n                _authenticated = false;\n\n        var service = {\n            authenticate: authenticate,\n            hasAnyAuthority: hasAnyAuthority,\n            hasAuthority: hasAuthority,\n            identity: identity,\n            isAuthenticated: isAuthenticated,\n            isIdentityResolved: isIdentityResolved,\n        };\n\n        return service;\n\n        function authenticate(identity) {\n            _identity = identity;\n            _authenticated = identity !== null;\n        }\n\n        function hasAnyAuthority(authorities) {\n            if (!_authenticated || !_identity || !_identity.authorities) {\n                return false;\n            }\n\n            for (var i = 0; i < authorities.length; i++) {\n                if (_identity.authorities.indexOf(authorities[i]) !== -1) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function hasAuthority(authority) {\n            if (!_authenticated) {\n                return $q.when(false);\n            }\n\n            return this.identity().then(function (_id) {\n                return _id.authorities && _id.authorities.indexOf(authority) !== -1;\n            }, function () {\n                return false;\n            });\n        }\n\n        function identity(force) {\n            var deferred = $q.defer();\n\n\n            if (force === true) {\n                _identity = undefined;\n\n            }\n\n            // check and see if we have retrieved the identity data from the server.\n            // if we have, reuse it by immediately resolving\n            if (angular.isDefined(_identity)) {\n                deferred.resolve(_identity);\n\n\n                return deferred.promise;\n            }\n\n            // retrieve the identity data from the server, update the identity object, and then resolve.\n            Account.get().$promise\n                    .then(getAccountThen)\n                    .catch(getAccountCatch);\n\n            return deferred.promise;\n\n            function getAccountThen(account) {\n                _identity = account.data;\n                _authenticated = true;\n                deferred.resolve(_identity);\n            }\n\n            function getAccountCatch() {\n                _identity = null;\n                _authenticated = false;\n                deferred.resolve(_identity);\n            }\n        }\n\n        function isAuthenticated() {\n            return _authenticated;\n        }\n\n        function isIdentityResolved() {\n            return angular.isDefined(_identity);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('PasswordResetInit', PasswordResetInit);\n\n    PasswordResetInit.$inject = ['$resource'];\n\n    function PasswordResetInit($resource) {\n        var service = $resource('api/account/reset_password/init', {}, {});\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('PasswordResetFinish', PasswordResetFinish);\n\n    PasswordResetFinish.$inject = ['$resource'];\n\n    function PasswordResetFinish($resource) {\n        var service = $resource('api/account/reset_password/finish', {}, {});\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('Password', Password);\n\n    Password.$inject = ['$resource'];\n\n    function Password($resource) {\n        var service = $resource('api/account/change_password', {}, {});\n\n        return service;\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .directive('hasAuthority', hasAuthority);\n\n    hasAuthority.$inject = ['Principal'];\n\n    function hasAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\n\n            var setVisible = function () {\n                element.removeClass('hidden');\n            };\n            var setHidden = function () {\n                element.addClass('hidden');\n            };\n            var defineVisibility = function (reset) {\n\n                if (reset) {\n                    setVisible();\n                }\n\n                Principal.hasAuthority(authority)\n                        .then(function (result) {\n\n                            if (result) {\n                                setVisible();\n                            } else {\n                                setHidden();\n                            }\n                        });\n            };\n\n            if (authority.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function () {\n                    return Principal.isAuthenticated();\n                }, function () {\n                    defineVisibility(true);\n                });\n            }\n\n            // we catch the user's role changement to update some components visbility\n            scope.$on(\n                    'update-authorities',\n                    function () {\n                        defineVisibility(true);\n                    }\n            );\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .directive('hasAnyAuthority', hasAnyAuthority);\n\n    hasAnyAuthority.$inject = ['Principal'];\n\n    function hasAnyAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\n\n            var setVisible = function () {\n                element.removeClass('hidden');\n            },\n                    setHidden = function () {\n                        element.addClass('hidden');\n                    },\n                    defineVisibility = function (reset) {\n                        var result;\n                        if (reset) {\n                            setVisible();\n                        }\n\n                        result = Principal.hasAnyAuthority(authorities);\n                        if (result) {\n                            setVisible();\n                        } else {\n                            setHidden();\n                        }\n                    };\n\n            if (authorities.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function () {\n                    return Principal.isAuthenticated();\n                }, function () {\n                    defineVisibility(true);\n                });\n            }\n\n            // we catch the user's role changement to update some components visbility\n            scope.$on(\n                    'update-authorities',\n                    function () {\n                        defineVisibility(true);\n                    }\n            );\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .factory('AuthServerProvider', AuthServerProvider);\n\n    AuthServerProvider.$inject = ['$http', '$localStorage'];\n\n    function AuthServerProvider($http, $localStorage) {\n        var service = {\n            getToken: getToken,\n            hasValidToken: hasValidToken,\n            login: login,\n            logout: logout\n        };\n\n        return service;\n\n        function getToken() {\n            var token = $localStorage.authenticationToken;\n            return token;\n        }\n\n        function hasValidToken() {\n            var token = this.getToken();\n            return !!token;\n        }\n\n        function login(credentials) {\n            var data = 'j_username=' + encodeURIComponent(credentials.username) +\n                    '&j_password=' + encodeURIComponent(credentials.password) +\n                    '&remember-me=' + credentials.rememberMe + '&submit=Login';\n\n            return $http.post('api/authentication', data, {\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }).success(function (response) {\n                return response;\n            });\n        }\n\n        function logout() {\n\n            // logout from the server\n            $http.post('api/logout').success(function (response) {\n                delete $localStorage.authenticationToken;\n                // to get a new csrf token call the api\n                $http.get('api/account');\n                return response;\n            });\n\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .factory('Auth', Auth);\n\n    Auth.$inject = ['$rootScope', '$state', '$sessionStorage', '$q', '$translate', 'Principal', 'AuthServerProvider', 'Account', 'LoginService', 'Register', 'Activate', 'Password', 'PasswordResetInit', 'PasswordResetFinish'];\n\n    function Auth($rootScope, $state, $sessionStorage, $q, $translate, Principal, AuthServerProvider, Account, LoginService, Register, Activate, Password, PasswordResetInit, PasswordResetFinish) {\n        var service = {\n            activateAccount: activateAccount,\n            authorize: authorize,\n            changePassword: changePassword,\n            createAccount: createAccount,\n            getPreviousState: getPreviousState,\n            login: login,\n            logout: logout,\n            resetPasswordFinish: resetPasswordFinish,\n            resetPasswordInit: resetPasswordInit,\n            resetPreviousState: resetPreviousState,\n            storePreviousState: storePreviousState,\n            updateAccount: updateAccount\n        };\n\n        return service;\n\n        function activateAccount(key, callback) {\n            var cb = callback || angular.noop;\n\n            return Activate.get(key,\n                    function (response) {\n                        return cb(response);\n                    },\n                    function (err) {\n                        return cb(err);\n                    }.bind(this)).$promise;\n        }\n\n        function authorize(force) {\n\n            var authReturn = Principal.identity(force).then(authThen);\n\n            return authReturn;\n\n            function authThen(account) {\n                var isAuthenticated = Principal.isAuthenticated();\n\n                // an authenticated user can't access to login and register pages\n                if (isAuthenticated && ($rootScope.toState.parent === 'account' || $rootScope.toState.parent === 'app') && ($rootScope.toState.name === 'home' || $rootScope.toState.name === 'login' || $rootScope.toState.name === 'register')) {\n\n                    if (account) {\n\n                        // case the user has the role ROLE_ADMIN or ROLE_USERS_MANAGER\n                        // we redirect him to the users manager screen\n                        if (account.authorities.indexOf('ROLE_ADMIN') >= 0 || account.authorities.indexOf('ROLE_USERS_MANAGER') >= 0) {\n                            $state.go('user-management', null, {reload: true});\n                        }\n                        // else we will redirect him to the calories screen\n                        else {\n                            $state.go('user-calories', {'username': account.login});\n                        }\n\n                    }\n\n                }\n\n                // recover and clear previousState after external login redirect (e.g. oauth2)\n//                if (isAuthenticated && !$rootScope.fromState.name && getPreviousState()) {\n//                    var previousState = getPreviousState();\n//                    resetPreviousState();\n//                    $state.go(previousState.name, previousState.params);\n//                }\n\n                if ($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities)) {\n                    if (isAuthenticated) {\n                        // user is signed in but not authorized for desired state\n                        $state.go('accessdenied');\n                    } else {\n                        // user is not authenticated. stow the state they wanted before you\n                        // send them to the login service, so you can return them when you're done\n                        storePreviousState($rootScope.toState.name, $rootScope.toStateParams);\n\n                        // now, send them to the signin state so they can log in\n                        $state.go('accessdenied').then(function () {\n                            LoginService.open();\n                        });\n                    }\n                }\n            }\n        }\n\n        function changePassword(newPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return Password.save(newPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function createAccount(account, callback) {\n            var cb = callback || angular.noop;\n\n            return Register.save(account,\n                    function () {\n                        return cb(account);\n                    },\n                    function (err) {\n                        this.logout();\n                        return cb(err);\n                    }.bind(this)).$promise;\n        }\n\n        function login(credentials, callback) {\n            var cb = callback || angular.noop;\n            var deferred = $q.defer();\n\n            AuthServerProvider.login(credentials)\n                    .then(loginThen)\n                    .catch(function (err) {\n                        this.logout();\n                        deferred.reject(err);\n                        return cb(err);\n                    }.bind(this));\n\n            function loginThen(data) {\n\n                Principal.identity(true).then(function (account) {\n                    // After the login the language will be changed to\n                    // the language selected by the user during his registration\n                    if (account !== null) {\n                        $translate.use(account.langKey).then(function () {\n                            $translate.refresh();\n                        });\n                    }\n\n                    deferred.resolve(data);\n                });\n                return cb();\n            }\n\n            return deferred.promise;\n        }\n\n\n        function logout() {\n            AuthServerProvider.logout();\n            Principal.authenticate(null);\n        }\n\n        function resetPasswordFinish(keyAndPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetFinish.save(keyAndPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function resetPasswordInit(mail, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetInit.save(mail, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function updateAccount(account, callback) {\n            var cb = callback || angular.noop;\n\n            return Account.save(account,\n                    function () {\n                        return cb(account);\n                    },\n                    function (err) {\n                        return cb(err);\n                    }.bind(this)).$promise;\n        }\n\n        function getPreviousState() {\n            var previousState = $sessionStorage.previousState;\n            return previousState;\n        }\n\n        function resetPreviousState() {\n            delete $sessionStorage.previousState;\n        }\n\n        function storePreviousState(previousStateName, previousStateParams) {\n            var previousState = {\"name\": previousStateName, \"params\": previousStateParams};\n            $sessionStorage.previousState = previousState;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('Activate', Activate);\n\n    Activate.$inject = ['$resource'];\n\n    function Activate ($resource) {\n        var service = $resource('api/activate', {}, {\n            'get': { method: 'GET', params: {}, isArray: false}\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('Account', Account);\n\n    Account.$inject = ['$resource'];\n\n    function Account ($resource) {\n        var service = $resource('api/account', {}, {\n            'get': { method: 'GET', params: {}, isArray: false,\n                interceptor: {\n                    response: function(response) {\n                        // expose response\n                        return response;\n                    }\n                }\n            }\n        });\n\n        return service;\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .controller('NavbarController', NavbarController);\n\n    NavbarController.$inject = ['$state', 'Auth', 'Principal', 'ProfileService', 'LoginService'];\n\n    function NavbarController($state, Auth, Principal, ProfileService, LoginService) {\n        var vm = this;\n\n        vm.isNavbarCollapsed = true;\n        vm.isAuthenticated = Principal.isAuthenticated;\n\n        ProfileService.getProfileInfo().then(function (response) {\n            vm.inProduction = response.inProduction;\n            vm.swaggerEnabled = response.swaggerEnabled;\n        });\n\n        vm.login = login;\n        vm.logout = logout;\n        vm.toggleNavbar = toggleNavbar;\n        vm.collapseNavbar = collapseNavbar;\n        vm.$state = $state;\n\n        // this function is called to redirect the user to the home screen depending\n        // on the fact he is connected or not and on the roles he has\n        vm.goHome = goHome;\n\n        // this method redirects the user to the calories screen\n        vm.goToMyCalories = goToMyCalories;\n\n        function login() {\n            collapseNavbar();\n            LoginService.open();\n        }\n\n        function logout() {\n            collapseNavbar();\n            Auth.logout();\n            $state.go('home');\n        }\n\n        function toggleNavbar() {\n            vm.isNavbarCollapsed = !vm.isNavbarCollapsed;\n        }\n\n        function collapseNavbar() {\n            vm.isNavbarCollapsed = true;\n        }\n\n        function goHome() {\n            if (!vm.isAuthenticated()) {\n                $state.go('home');\n            } else {\n\n\n                Principal.identity().then(function (account) {\n                    vm.account = account;\n\n                    if (vm.account) {\n\n                        // case the user has the role ROLE_ADMIN or ROLE_USERS_MANAGER\n                        // we redirect him to the users manager screen\n                        if (vm.account.authorities.indexOf('ROLE_ADMIN') >= 0 || vm.account.authorities.indexOf('ROLE_USERS_MANAGER') >= 0) {\n                            $state.go('user-management', null, {reload: true});\n                        }\n                        // else we will redirect him to the calories screen\n                        else {\n                            $state.go('user-calories', {'username': vm.account.login});\n                        }\n\n                    }\n\n                });\n\n\n            }\n        }\n\n        function goToMyCalories() {\n            Principal.identity().then(function (account) {\n                vm.account = account;\n\n                if (vm.account) {\n\n                    // case the user has the role ROLE_ADMIN or ROLE_USERS_MANAGER\n                    // we redirect him to the users manager screen\n                    if (vm.account.authorities.indexOf('ROLE_USER') >= 0) {\n                        $state.go('user-calories', {'username': vm.account.login});\n                    }\n\n                }\n\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .directive('activeMenu', activeMenu);\n\n    activeMenu.$inject = ['$translate', '$locale', 'tmhDynamicLocale'];\n\n    function activeMenu($translate, $locale, tmhDynamicLocale) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var language = attrs.activeMenu;\n\n            scope.$watch(function() {\n                return $translate.use();\n            }, function(selectedLanguage) {\n                if (language === selectedLanguage) {\n                    tmhDynamicLocale.set(language);\n                    element.addClass('active');\n                } else {\n                    element.removeClass('active');\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('error', {\n                parent: 'app',\n                url: '/error',\n                data: {\n                    authorities: [],\n                    pageTitle: 'error.title'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/error.html'\n                    }\n                },\n                resolve: {\n                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {\n                        $translatePartialLoader.addPart('error');\n                        return $translate.refresh();\n                    }]\n                }\n            })\n            .state('accessdenied', {\n                parent: 'app',\n                url: '/accessdenied',\n                data: {\n                    authorities: []\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/accessdenied.html'\n                    }\n                },\n                resolve: {\n                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {\n                        $translatePartialLoader.addPart('error');\n                        return $translate.refresh();\n                    }]\n                }\n            });\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('home', {\n            parent: 'app',\n            url: '/',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/home/home.html',\n                    controller: 'HomeController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        $translatePartialLoader.addPart('home');\n                        $translatePartialLoader.addPart('login');\n                        return $translate.refresh();\n                    }]\n            }\n        });\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .controller('HomeController', HomeController);\n\n    HomeController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];\n\n    function HomeController($scope, Principal, LoginService, $state) {\n        var vm = this;\n\n        vm.account = null;\n        vm.isAuthenticated = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n\n        // this boolean will indivate whether to perform a redirection when calling\n        // getAccount method\n        vm.performRedirection = false;\n\n        $scope.$on('authenticationSuccess', function () {\n            vm.performRedirection = true;\n            getAccount();\n        });\n\n        getAccount();\n\n        function getAccount() {\n            Principal.identity().then(function (account) {\n                vm.account = account;\n                vm.isAuthenticated = Principal.isAuthenticated;\n\n                if (vm.performRedirection && vm.account) {\n\n                    // case the user has the role ROLE_ADMIN or ROLE_USERS_MANAGER\n                    // we redirect him to the users manager screen\n                    if (vm.account.authorities.indexOf('ROLE_ADMIN') >= 0 || vm.account.authorities.indexOf('ROLE_USERS_MANAGER') >= 0) {\n                        $state.go('user-management', null, {reload: true});\n                    }\n                    // else we will redirect him to the calories screen\n                    else {\n                        $state.go('user-calories', {'username': vm.account.login});\n                    }\n\n                }\n\n            });\n        }\n        function register() {\n            $state.go('register');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('entity', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .filter('words', words);\n\n    function words() {\n        return wordsFilter;\n\n        function wordsFilter(input, words) {\n            if (isNaN(words)) {\n                return input;\n            }\n            if (words <= 0) {\n                return '';\n            }\n            if (input) {\n                var inputWords = input.split(/\\s+/);\n                if (inputWords.length > words) {\n                    input = inputWords.slice(0, words).join(' ') + '...';\n                }\n            }\n            return input;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .filter('characters', characters);\n\n    function characters () {\n        return charactersFilter;\n\n        function charactersFilter(input, chars, breakOnWord) {\n            if (isNaN(chars)) {\n                return input;\n            }\n            if (chars <= 0) {\n                return '';\n            }\n            if (input && input.length > chars) {\n                input = input.substring(0, chars);\n\n                if (!breakOnWord) {\n                    var lastspace = input.lastIndexOf(' ');\n                    // Get last space\n                    if (lastspace !== -1) {\n                        input = input.substr(0, lastspace);\n                    }\n                } else {\n                    while (input.charAt(input.length-1) === ' ') {\n                        input = input.substr(0, input.length - 1);\n                    }\n                }\n                return input + '...';\n            }\n            return input;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .directive('jhSortBy', jhSortBy);\n\n    function jhSortBy() {\n        var directive = {\n            restrict: 'A',\n            scope: false,\n            require: '^jhSort',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs, parentCtrl) {\n            element.bind('click', function () {\n                parentCtrl.sort(attrs.jhSortBy);\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .directive('jhSort', jhSort);\n\n    function jhSort () {\n        var directive = {\n            restrict: 'A',\n            scope: {\n                predicate: '=jhSort',\n                ascending: '=',\n                callback: '&'\n            },\n            controller: SortController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n    }\n\n    SortController.$inject = ['$scope', '$element'];\n\n    function SortController ($scope, $element) {\n        var vm = this;\n\n        vm.applyClass = applyClass;\n        vm.resetClasses = resetClasses;\n        vm.sort = sort;\n        vm.triggerApply = triggerApply;\n\n        $scope.$watchGroup(['vm.predicate', 'vm.ascending'], vm.triggerApply);\n        vm.triggerApply();\n\n        function applyClass (element) {\n            var thisIcon = element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt',\n                remove = sortIcon + ' ' + sortDesc,\n                add = sortAsc;\n            if (!vm.ascending) {\n                remove = sortIcon + ' ' + sortAsc;\n                add = sortDesc;\n            }\n            vm.resetClasses();\n            thisIcon.removeClass(remove);\n            thisIcon.addClass(add);\n        }\n\n        function resetClasses () {\n            var allThIcons = $element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt';\n            allThIcons.removeClass(sortAsc + ' ' + sortDesc);\n            allThIcons.addClass(sortIcon);\n        }\n\n        function sort (field) {\n            if (field !== vm.predicate) {\n                vm.ascending = true;\n            } else {\n                vm.ascending = !vm.ascending;\n            }\n            vm.predicate = field;\n            $scope.$apply();\n            vm.callback();\n        }\n\n        function triggerApply (values)  {\n            vm.resetClasses();\n            if (values && values[0] !== '_score') {\n                vm.applyClass($element.find('th[jh-sort-by=\\'' + values[0] + '\\']'));\n            }\n        }\n    }\n})();\n","(function(){\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('ParseLinks', ParseLinks);\n\n    function ParseLinks () {\n\n        var service = {\n            parse : parse\n        };\n\n        return service;\n\n        function parse(header) {\n            if (header.length === 0) {\n                throw new Error('input must not be of zero length');\n            }\n\n            // Split parts by comma\n            var parts = header.split(',');\n            var links = {};\n            // Parse each part into a named link\n            angular.forEach(parts, function(p) {\n                var section = p.split('>;');\n                if (section.length !== 2) {\n                    throw new Error('section could not be split on \">;\"');\n                }\n                var url = section[0].replace(/<(.*)/, '$1').trim();\n                var queryString = {};\n                url.replace(\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n                    function($0, $1, $2, $3) { queryString[$1] = $3; }\n                );\n                var page = queryString.page;\n                if (angular.isString(page)) {\n                    page = parseInt(page);\n                }\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n                links[name] = page;\n            });\n            return links;\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .factory('PaginationUtil', PaginationUtil);\n\n    function PaginationUtil() {\n\n        var service = {\n            parseAscending: parseAscending,\n            parsePage: parsePage,\n            parsePredicate: parsePredicate\n        };\n\n        return service;\n\n        function parseAscending(sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1) {\n                return sort.split(',').slice(-1)[0] === 'asc';\n            } else {\n                // default to true if no sort defined\n                return true;\n            }\n        }\n\n        // query params are strings, and need to be parsed\n        function parsePage(page) {\n            if (page) {\n                return parseInt(page);\n            }\n            return null;\n        }\n\n        // sort can be in the format `id,asc` or `id`\n        function parsePredicate(sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1) {\n                sortArray.pop();\n            }\n            return sortArray.join(',');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    var jhiItemCount = {\n        template: '<div class=\"info\">' +\n                    'Showing {{(($ctrl.page - 1) * $ctrl.itemsPerPage) == 0 ? 1 : (($ctrl.page - 1) * $ctrl.itemsPerPage + 1)}} - ' +\n                    '{{($ctrl.page * $ctrl.itemsPerPage) < $ctrl.queryCount ? ($ctrl.page * $ctrl.itemsPerPage) : $ctrl.queryCount}} ' +\n                    'of {{$ctrl.queryCount}} items.' +\n                '</div>',\n        bindings: {\n            page: '<',\n            queryCount: '<total',\n            itemsPerPage: '<'\n        }\n    };\n\n    angular\n        .module('caloappApp')\n        .component('jhiItemCount', jhiItemCount);\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('DateUtils', DateUtils);\n\n    DateUtils.$inject = ['$filter'];\n\n    function DateUtils ($filter) {\n\n        var service = {\n            convertDateTimeFromServer : convertDateTimeFromServer,\n            convertLocalDateFromServer : convertLocalDateFromServer,\n            convertLocalDateToServer : convertLocalDateToServer,\n            dateformat : dateformat\n        };\n\n        return service;\n\n        function convertDateTimeFromServer (date) {\n            if (date) {\n                return new Date(date);\n            } else {\n                return null;\n            }\n        }\n\n        function convertLocalDateFromServer (date) {\n            if (date) {\n                var dateString = date.split('-');\n                return new Date(dateString[0], dateString[1] - 1, dateString[2]);\n            }\n            return null;\n        }\n\n        function convertLocalDateToServer (date) {\n            if (date) {\n                return $filter('date')(date, 'yyyy-MM-dd');\n            } else {\n                return null;\n            }\n        }\n\n        function dateformat () {\n            return 'yyyy-MM-dd';\n        }\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('DataUtils', DataUtils);\n\n    DataUtils.$inject = ['$window'];\n\n    function DataUtils ($window) {\n\n        var service = {\n            abbreviate: abbreviate,\n            byteSize: byteSize,\n            openFile: openFile,\n            toBase64: toBase64\n        };\n\n        return service;\n\n        function abbreviate (text) {\n            if (!angular.isString(text)) {\n                return '';\n            }\n            if (text.length < 30) {\n                return text;\n            }\n            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';\n        }\n\n        function byteSize (base64String) {\n            if (!angular.isString(base64String)) {\n                return '';\n            }\n\n            function endsWith(suffix, str) {\n                return str.indexOf(suffix, str.length - suffix.length) !== -1;\n            }\n\n            function paddingSize(base64String) {\n                if (endsWith('==', base64String)) {\n                    return 2;\n                }\n                if (endsWith('=', base64String)) {\n                    return 1;\n                }\n                return 0;\n            }\n\n            function size(base64String) {\n                return base64String.length / 4 * 3 - paddingSize(base64String);\n            }\n\n            function formatAsBytes(size) {\n                return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\n            }\n\n            return formatAsBytes(size(base64String));\n        }\n\n        function openFile (type, data) {\n            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');\n        }\n\n        function toBase64 (file, cb) {\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = function (e) {\n                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\n                cb(base64Data);\n            };\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .filter('capitalize', capitalize);\n\n    function capitalize() {\n        return capitalizeFilter;\n\n        function capitalizeFilter (input) {\n            if (input !== null) {\n                input = input.toLowerCase();\n                input = input.substring(0, 1).toUpperCase() + input.substring(1);\n            }\n            return input;\n        }\n    }\n})();\n","(function() {\n    /*jshint bitwise: false*/\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('Base64', Base64);\n\n    function Base64 () {\n        var keyStr = 'ABCDEFGHIJKLMNOP' +\n            'QRSTUVWXYZabcdef' +\n            'ghijklmnopqrstuv' +\n            'wxyz0123456789+/' +\n            '=';\n\n        var service = {\n            decode : decode,\n            encode : encode\n        };\n\n        return service;\n\n        function encode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            while (i < input.length) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    keyStr.charAt(enc1) +\n                    keyStr.charAt(enc2) +\n                    keyStr.charAt(enc3) +\n                    keyStr.charAt(enc4);\n            }\n\n            return output;\n        }\n\n        function decode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n            while (i < input.length) {\n                enc1 = keyStr.indexOf(input.charAt(i++));\n                enc2 = keyStr.indexOf(input.charAt(i++));\n                enc3 = keyStr.indexOf(input.charAt(i++));\n                enc4 = keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 !== 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 !== 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n            }\n\n            return output;\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .factory('LoginService', LoginService);\n\n    LoginService.$inject = ['$state'];\n\n    function LoginService($state) {\n        var service = {\n            open: open\n        };\n\n        return service;\n\n        function open() {\n            $state.go('home');\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .controller('LoginController', LoginController);\n\n    LoginController.$inject = ['$rootScope', '$state', '$timeout', 'Auth'];\n\n    function LoginController($rootScope, $state, $timeout, Auth) {\n        var vm = this;\n\n        vm.authenticationError = false;\n        vm.cancel = cancel;\n        vm.credentials = {};\n        vm.login = login;\n        vm.password = null;\n        vm.register = register;\n        vm.rememberMe = true;\n        vm.requestResetPassword = requestResetPassword;\n        vm.username = null;\n\n        $timeout(function () {\n            angular.element('#username').focus();\n        });\n\n        function cancel() {\n            vm.credentials = {\n                username: null,\n                password: null,\n                rememberMe: true\n            };\n            vm.authenticationError = false;\n\n        }\n\n        function login(event) {\n            event.preventDefault();\n            Auth.login({\n                username: vm.username,\n                password: vm.password,\n                rememberMe: vm.rememberMe\n            }).then(function () {\n                vm.authenticationError = false;\n\n//                if ($state.current.name === 'register' || $state.current.name === 'activate' ||\n//                        $state.current.name === 'finishReset' || $state.current.name === 'requestReset') {\n//                    $state.go('home');\n//                }\n\n                $rootScope.$broadcast('authenticationSuccess');\n\n                // previousState was set in the authExpiredInterceptor before being redirected to login modal.\n                // since login is successful, go to stored previousState and clear previousState\n//                if (Auth.getPreviousState()) {\n//                    var previousState = Auth.getPreviousState();\n//                    Auth.resetPreviousState();\n//                    $state.go(previousState.name, previousState.params);\n//                }\n            }).catch(function () {\n                vm.authenticationError = true;\n            });\n        }\n\n        function register() {\n            $state.go('register');\n        }\n\n        function requestResetPassword() {\n            $state.go('requestReset');\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('JhiLanguageService', JhiLanguageService);\n\n    JhiLanguageService.$inject = ['$q', '$http', '$translate', 'LANGUAGES'];\n\n    function JhiLanguageService ($q, $http, $translate, LANGUAGES) {\n        var service = {\n            getAll: getAll,\n            getCurrent: getCurrent\n        };\n\n        return service;\n\n        function getAll () {\n            var deferred = $q.defer();\n            deferred.resolve(LANGUAGES);\n            return deferred.promise;\n        }\n\n        function getCurrent () {\n            var deferred = $q.defer();\n            var language = $translate.storage().get('NG_TRANSLATE_LANG_KEY');\n\n            deferred.resolve(language);\n\n            return deferred.promise;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .filter('findLanguageFromKey', findLanguageFromKey);\n\n    function findLanguageFromKey() {\n        return findLanguageFromKeyFilter;\n\n        function findLanguageFromKeyFilter(lang) {\n            return {\n                'ca': 'Català',\n                'cs': 'Český',\n                'da': 'Dansk',\n                'de': 'Deutsch',\n                'el': 'Ελληνικά',\n                'en': 'English',\n                'es': 'Español',\n                'et': 'Eesti',\n                'fr': 'Français',\n                'gl': 'Galego',\n                'hu': 'Magyar',\n                'hi': 'हिंदी',\n                'it': 'Italiano',\n                'ja': '日本語',\n                'ko': '한국어',\n                'mr': 'मराठी',\n                'nl': 'Nederlands',\n                'pl': 'Polski',\n                'pt-br': 'Português (Brasil)',\n                'pt-pt': 'Português',\n                'ro': 'Română',\n                'ru': 'Русский',\n                'sk': 'Slovenský',\n                'sr': 'Srpski',\n                'sv': 'Svenska',\n                'ta': 'தமிழ்',\n                'tr': 'Türkçe',\n                'vi': 'Tiếng Việt',\n                'zh-cn': '中文（简体）',\n                'zh-tw': '繁體中文'\n            }[lang];\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .controller('JhiLanguageController', JhiLanguageController);\n\n    JhiLanguageController.$inject = ['$translate', 'JhiLanguageService', 'tmhDynamicLocale'];\n\n    function JhiLanguageController ($translate, JhiLanguageService, tmhDynamicLocale) {\n        var vm = this;\n\n        vm.changeLanguage = changeLanguage;\n        vm.languages = null;\n\n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n\n        function changeLanguage (languageKey) {\n            $translate.use(languageKey);\n            tmhDynamicLocale.set(languageKey);\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n\n        /*\n         Languages codes are ISO_639-1 codes, see http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n         They are written in English to avoid character encoding issues (not a perfect solution)\n         */\n        .constant('LANGUAGES', [\n            'en'\n            // jhipster-needle-i18n-language-constant - JHipster will add/remove languages in this array\n        ]\n    );\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .directive('showValidation', showValidation);\n\n    function showValidation () {\n        var directive = {\n            restrict: 'A',\n            require: 'form',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, formCtrl) {\n            element.find('.form-group').each(function() {\n                var $formGroup = angular.element(this);\n                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');\n\n                if ($inputs.length > 0) {\n                    $inputs.each(function() {\n                        var $input = angular.element(this);\n                        var inputName = $input.attr('name');\n                        scope.$watch(function() {\n                            return formCtrl[inputName].$invalid && formCtrl[inputName].$dirty;\n                        }, function(isInvalid) {\n                            $formGroup.toggleClass('has-error', isInvalid);\n                        });\n                    });\n                }\n            });\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .constant('paginationConstants', {\n                'itemsPerPage': 10\n            });\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .directive('minbytes', minbytes);\n\n    function minbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.minbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .directive('maxbytes', maxbytes);\n\n    function maxbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.maxbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    var jhiAlertError = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre>{{ alert.msg }}</pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertErrorController\n    };\n\n    angular\n        .module('caloappApp')\n        .component('jhiAlertError', jhiAlertError);\n\n    jhiAlertErrorController.$inject = ['$scope', 'AlertService', '$rootScope', '$translate'];\n\n    function jhiAlertErrorController ($scope, AlertService, $rootScope, $translate) {\n        var vm = this;\n\n        vm.alerts = [];\n\n        function addErrorAlert (message, key, data) {\n            key = key ? key : message;\n            vm.alerts.push(\n                AlertService.add(\n                    {\n                        type: 'danger',\n                        msg: key,\n                        params: data,\n                        timeout: 5000,\n                        toast: AlertService.isToast(),\n                        scoped: true\n                    },\n                    vm.alerts\n                )\n            );\n        }\n\n        var cleanHttpErrorListener = $rootScope.$on('caloappApp.httpError', function (event, httpResponse) {\n            var i;\n            event.stopPropagation();\n            switch (httpResponse.status) {\n            // connection refused, server not reachable\n            case 0:\n                addErrorAlert('Server not reachable','error.server.not.reachable');\n                break;\n\n            case 400:\n                var headers = Object.keys(httpResponse.headers()).filter(function (header) {\n                    return header.indexOf('app-error', header.length - 'app-error'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\n                }).sort();\n                var errorHeader = httpResponse.headers(headers[0]);\n                var entityKey = httpResponse.headers(headers[1]);\n                if (errorHeader) {\n                    var entityName = $translate.instant('global.menu.entities.' + entityKey);\n                    addErrorAlert(errorHeader, errorHeader, {entityName: entityName});\n                } else if (httpResponse.data && httpResponse.data.fieldErrors) {\n                    for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\n                        var fieldError = httpResponse.data.fieldErrors[i];\n                        // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                        var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                        var fieldName = $translate.instant('caloappApp.' + fieldError.objectName + '.' + convertedField);\n                        addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});\n                    }\n                } else if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\n                } else {\n                    addErrorAlert(httpResponse.data);\n                }\n                break;\n\n            case 404:\n                addErrorAlert('Not found','error.url.not.found');\n                break;\n\n            default:\n                if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message);\n                } else {\n                    addErrorAlert(angular.toJson(httpResponse));\n                }\n            }\n        });\n\n        $scope.$on('$destroy', function () {\n            if(angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null){\n                cleanHttpErrorListener();\n                vm.alerts = [];\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .provider('AlertService', AlertService);\n\n    function AlertService () {\n        this.toast = false;\n        /*jshint validthis: true */\n        this.$get = getService;\n\n        this.showAsToast = function(isToast) {\n            this.toast = isToast;\n        };\n\n        getService.$inject = ['$timeout', '$sce', '$translate'];\n\n        function getService ($timeout, $sce,$translate) {\n            var toast = this.toast,\n                alertId = 0, // unique id for each alert. Starts from 0.\n                alerts = [],\n                timeout = 5000; // default timeout\n\n            return {\n                factory: factory,\n                isToast: isToast,\n                add: addAlert,\n                closeAlert: closeAlert,\n                closeAlertByIndex: closeAlertByIndex,\n                clear: clear,\n                get: get,\n                success: success,\n                error: error,\n                info: info,\n                warning : warning\n            };\n\n            function isToast() {\n                return toast;\n            }\n\n            function clear() {\n                alerts = [];\n            }\n\n            function get() {\n                return alerts;\n            }\n\n            function success(msg, params, position) {\n                return this.add({\n                    type: 'success',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function error(msg, params, position) {\n                return this.add({\n                    type: 'danger',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function warning(msg, params, position) {\n                return this.add({\n                    type: 'warning',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function info(msg, params, position) {\n                return this.add({\n                    type: 'info',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function factory(alertOptions) {\n                var alert = {\n                    type: alertOptions.type,\n                    msg: $sce.trustAsHtml(alertOptions.msg),\n                    id: alertOptions.alertId,\n                    timeout: alertOptions.timeout,\n                    toast: alertOptions.toast,\n                    position: alertOptions.position ? alertOptions.position : 'top right',\n                    scoped: alertOptions.scoped,\n                    close: function (alerts) {\n                        return closeAlert(this.id, alerts);\n                    }\n                };\n                if(!alert.scoped) {\n                    alerts.push(alert);\n                }\n                return alert;\n            }\n\n            function addAlert(alertOptions, extAlerts) {\n                alertOptions.alertId = alertId++;\n                alertOptions.msg = $translate.instant(alertOptions.msg, alertOptions.params);\n                var that = this;\n                var alert = this.factory(alertOptions);\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\n                    $timeout(function () {\n                        that.closeAlert(alertOptions.alertId, extAlerts);\n                    }, alertOptions.timeout);\n                }\n                return alert;\n            }\n\n            function closeAlert(id, extAlerts) {\n                var thisAlerts = extAlerts ? extAlerts : alerts;\n                return closeAlertByIndex(thisAlerts.map(function(e) { return e.id; }).indexOf(id), thisAlerts);\n            }\n\n            function closeAlertByIndex(index, thisAlerts) {\n                return thisAlerts.splice(index, 1);\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    var jhiAlert = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre ng-bind-html=\"alert.msg\"></pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertController\n    };\n\n    angular\n        .module('caloappApp')\n        .component('jhiAlert', jhiAlert);\n\n    jhiAlertController.$inject = ['$scope', 'AlertService'];\n\n    function jhiAlertController($scope, AlertService) {\n        var vm = this;\n\n        vm.alerts = AlertService.get();\n        $scope.$on('$destroy', function () {\n            vm.alerts = [];\n        });\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .factory('CaloriesModalService', CaloriesModalService);\n\n    CaloriesModalService.$inject = ['$uibModal', '$state'];\n\n    function CaloriesModalService($uibModal, $state) {\n        var service = {\n            open: open\n        };\n\n        var modalInstance = null;\n        var resetModal = function () {\n            modalInstance = null;\n            $state.go('user-calories', null, {reload: true});\n        };\n\n        var resetModalOnClose = function () {\n            modalInstance = null;\n        };\n\n        return service;\n\n        function open(aMealInformation) {\n\n            if (modalInstance !== null)\n                return;\n            modalInstance = $uibModal.open({\n                animation: true,\n                templateUrl: 'app/calories/modal/calories.modal.html',\n                controller: 'CaloriesModalController',\n                controllerAs: 'vm',\n                backdrop: 'static',\n                resolve: {\n                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                            $translatePartialLoader.addPart('calories');\n                            return $translate.refresh();\n                        }],\n                    mealInformation: function () {\n                        return aMealInformation;\n                    }\n                }\n            });\n\n            modalInstance.result.then(\n                    resetModal,\n                    resetModalOnClose\n                    );\n        }\n    }\n})();\n\n","\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .controller('CaloriesModalController', CaloriesModalController);\n\n    CaloriesModalController.$inject = ['$rootScope', '$state', '$timeout', '$uibModalInstance',\n        'mealInformation', '$stateParams', 'CaloriesService'];\n\n    function CaloriesModalController($rootScope, $state, $timeout, $uibModalInstance,\n            mealInformation, $stateParams, CaloriesService) {\n        var vm = this;\n\n        vm.userLogin = $stateParams.username;\n\n\n        // boolean informing whether the saving action is performing\n        vm.isSaving = false;\n\n        vm.editionOrCreationError = false;\n        vm.cancel = cancel;\n        vm.credentials = {\n            id: null,\n            calories: null,\n            description: null,\n            date: null,\n            time: null\n        };\n\n        $timeout(function () {\n            angular.element('#meal').focus();\n        });\n\n        // this method transforms a time represented in ms to a valid date\n        vm.getTime = getTime;\n\n        // this method is called to init the page\n        vm.init = init;\n\n        // this method is called to save the new/updated meal information\n        vm.save = save;\n\n        vm.init();\n\n        function init() {\n            // case we are updating a meal information\n            if (mealInformation) {\n                vm.credentials = {\n                    id: mealInformation.id,\n                    calories: mealInformation.calories,\n                    description: mealInformation.description,\n                    date: mealInformation.date ? new Date(mealInformation.date) : null,\n                    time: mealInformation.time ? vm.getTime(mealInformation.time) : null\n                };\n            }\n\n        }\n\n        function getTime(aTimeInMs) {\n            // get the number of hours\n            var lNbHours = parseInt(aTimeInMs / (3600 * 60));\n            var lNbMinutes = parseInt((aTimeInMs % (3600 * 60)) / 3600);\n\n            // the date to return\n            var lDate = new Date();\n            lDate.setHours(lNbHours);\n            lDate.setMinutes(lNbMinutes);\n            lDate.setSeconds(0);\n            lDate.setMilliseconds(0);\n\n            return lDate;\n        }\n\n        function save(event) {\n\n            // method called when the update/creation is successful\n            function onSaveSuccess(result) {\n                vm.isSaving = false;\n                $uibModalInstance.close(result);\n            }\n\n            // method called when the update/creation failed\n            function onSaveFailure() {\n                vm.isSaving = false;\n                vm.editionOrCreationError = true;\n            }\n\n            vm.editionOrCreationError = false;\n            event.preventDefault();\n            if (!vm.isSaving) {\n\n                vm.isSaving = true;\n\n                var credentialsToSend = {\n                    id: vm.credentials.id,\n                    userLogin: vm.userLogin,\n                    description: vm.credentials.description,\n                    calories: vm.credentials.calories\n                };\n\n                // we process the date to get the number of ms\n                var lDate = new Date(vm.credentials.date);\n                // we put the date 01:00 to be able to filter them quickly later\n                lDate.setHours(1);\n                lDate.setMinutes(0);\n\n                credentialsToSend.date = Number(lDate.getTime());\n\n                // we process the time to get the number of ms\n                var lTime = new Date(vm.credentials.time);\n                var lNbHours = lTime.getHours();\n                var lNbMinutes = lTime.getMinutes();\n\n                credentialsToSend.time = Number(((lNbHours * 60) + lNbMinutes) * 3600);\n\n                // depending on whether it is a creation or an update we will call a different WS\n                // case it is an update the id is inquired\n                if (vm.credentials.id) {\n                    CaloriesService.update(credentialsToSend, onSaveSuccess, onSaveFailure);\n                }\n                // case the user creates a new meal information\n                else {\n                    CaloriesService.save(credentialsToSend, onSaveSuccess, onSaveFailure);\n                }\n\n            }\n\n\n\n        }\n\n\n\n        function cancel() {\n            vm.credentials = {\n                id: null,\n                calories: null,\n                description: null,\n                date: null,\n                time: null\n            };\n            vm.editionOrCreationError = false;\n            $uibModalInstance.dismiss('cancel');\n        }\n\n\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .controller('UserCaloriesDeleteController', UserCaloriesDeleteController);\n\n    UserCaloriesDeleteController.$inject = ['$uibModalInstance', 'CaloriesService', '$stateParams'];\n\n    function UserCaloriesDeleteController($uibModalInstance, CaloriesService, $stateParams) {\n        var vm = this;\n\n        vm.mealInformationId = $stateParams.idMealInfo;\n\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear() {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete(mealInformationId) {\n            CaloriesService.delete({idMealInformation: mealInformationId},\n                    function () {\n                        $uibModalInstance.close(true);\n                    });\n        }\n    }\n})();\n\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .config(caloriesConfig);\n\n    caloriesConfig.$inject = ['$stateProvider'];\n\n    function caloriesConfig($stateProvider) {\n        $stateProvider\n                .state('user-calories', {\n                    parent: 'app',\n                    url: '/user-calories/:username?page',\n                    data: {\n                        authorities: ['ROLE_USER', 'ROLE_ADMIN'],\n                        pageTitle: 'calories.title'\n                    },\n                    views: {\n                        'content@': {\n                            templateUrl: 'app/calories/calories.html',\n                            controller: 'CaloriesController',\n                            controllerAs: 'vm'\n                        }\n                    },\n                    params: {\n                        page: {\n                            value: '1',\n                            squash: true\n                        },\n                        fromDate: {\n                            value: null,\n                            squash: true\n                        },\n                        toDate: {\n                            value: null,\n                            squash: true\n                        },\n                        fromTime: {\n                            value: null,\n                            squash: true\n                        },\n                        toTime: {\n                            value: null,\n                            squash: true\n                        }\n                    },\n                    resolve: {\n                        pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n\n                                var lSortParam = \"date,desc\";\n                                return {\n                                    page: PaginationUtil.parsePage($stateParams.page),\n                                    sort: lSortParam,\n                                    predicate: PaginationUtil.parsePredicate(lSortParam),\n                                    ascending: PaginationUtil.parseAscending(lSortParam),\n                                    fromDate: PaginationUtil.parsePage($stateParams.fromDate),\n                                    toDate: PaginationUtil.parsePage($stateParams.toDate),\n                                    fromTime: PaginationUtil.parsePage($stateParams.fromTime),\n                                    toTime: PaginationUtil.parsePage($stateParams.toTime)\n                                };\n                            }],\n                        mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                                $translatePartialLoader.addPart('calories');\n                                return $translate.refresh();\n                            }]\n                    }\n                })\n                .state('user-calories.delete', {\n                    parent: 'user-calories',\n                    url: '/{idMealInfo}/delete',\n                    data: {\n                        authorities: ['ROLE_USER', 'ROLE_ADMIN'],\n                    },\n                    onEnter: ['$stateParams', '$state', '$uibModal', function ($stateParams, $state, $uibModal) {\n                            $uibModal.open({\n                                templateUrl: 'app/calories/delete/user-calories-delete-dialog.html',\n                                controller: 'UserCaloriesDeleteController',\n                                controllerAs: 'vm',\n                                size: 'md'\n                            }).result.then(function () {\n                                $state.go('user-calories', null, {reload: true});\n                            }, function () {\n                                $state.go('^');\n                            });\n                        }]\n                });\n    }\n})();\n","\n(function () {\n    'use strict';\n    angular\n            .module('caloappApp')\n            .factory('CaloriesService', CaloriesService);\n    CaloriesService.$inject = ['$resource'];\n    function CaloriesService($resource) {\n\n\n        var service = $resource('api/meal-information/:idMealInformation', {}, {\n            'query': {\n                method: 'GET',\n                isArray: true,\n                params: {\n                    userLogin: null,\n                    fromDate: null,\n                    toDate: null,\n                    fromTime: null,\n                    toTime: null\n                }\n            },\n            'save': {method: 'POST'},\n            'update': {method: 'PUT'},\n            'delete': {method: 'DELETE'}\n        });\n        return service;\n    }\n}\n)();\n","\n(function () {\n    'use strict';\n    angular\n            .module('caloappApp')\n            .controller('CaloriesController', CaloriesController);\n    CaloriesController.$inject = ['$scope', 'CaloriesModalService', 'paginationConstants', 'pagingParams',\n        'AlertService', 'ParseLinks', 'CaloriesService', '$stateParams', '$state', 'Principal', 'User',\n        '$filter'];\n    function CaloriesController($scope, CaloriesModalService, paginationConstants, pagingParams,\n            AlertService, ParseLinks, CaloriesService, $stateParams, $state, Principal, User,\n            $filter) {\n        var vm = this;\n        vm.userLogin = $stateParams.username;\n\n        // the number of calories/day specified by the user\n        vm.dailyCaloriesLimit = null;\n\n        // the error message to display when something goes wrong with the filter\n        vm.filterErrorMessageToDisplay = null;\n\n        // boolean indicating whether the list of meals information is loading\n        vm.isListMealsInformationLoading = false;\n\n        // this method is called to init the page\n        vm.init = init;\n\n        // list of keys to get the different meals information by date.\n        // Each element contain the number of meals information having the same date and the\n        // index, within the list vm.mealInformationsSimpleList, of the first element having that date\n        vm.listInformationByDate = [];\n\n        // simple list of meals information\n        vm.mealInformationsSimpleList = [];\n\n        // this list will contain for each day the total calories added by the user\n        vm.listCaloriesPerDay = [];\n\n        // this method clears the filter and reload the page without filters\n        vm.clearFilter = clearFilter;\n\n        // pagination information\n        vm.page = 1;\n        vm.totalItems = null;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.links = null;\n        vm.transition = transition;\n\n        // this method is called to loead meals information matching a specific page\n        // => when the user changes a page\n        vm.loadPage = loadPage;\n        // this method reload the current page\n        vm.loadAll = loadAll;\n        // this method opens the meal modal whether for creation or edition\n        vm.openMealModal = CaloriesModalService.open;\n\n        // given the date in the parameter this method checks whether the user has exceeded the calories\n        // limit or not. It returns true if the limit is exceeded\n        vm.checkLimit = checkLimit;\n\n        // method called to edit a meal information line\n        vm.editMealInformation = editMealInformation;\n\n        // this method is called to filter calories by date and time\n        vm.loadMealsInformationByFilter = loadMealsInformationByFilter;\n\n        // this boolean indicates whether the filter is processing or not\n        vm.isFilterProcessing = false;\n\n        // this method transforms a time represented in ms to a valid date\n        vm.getTime = getTime;\n\n        // the filter information that will be used by the filter query\n        vm.filterInformationForQuery = {\n            beginDate: pagingParams.fromDate,\n            endDate: pagingParams.toDate,\n            beginTime: pagingParams.fromTime,\n            endTime: pagingParams.toTime\n        };\n\n        // the filter information that would be manipulated within the screen\n        vm.filterInformationForScreen = {\n            beginDate: pagingParams.fromDate ? new Date(pagingParams.fromDate) : null,\n            endDate: pagingParams.toDate ? new Date(pagingParams.toDate) : null,\n            beginTime: pagingParams.fromTime ? vm.getTime(pagingParams.fromTime) : null,\n            endTime: pagingParams.toTime ? vm.getTime(pagingParams.toTime) : null\n        };\n\n        function getTime(aTimeInMs) {\n            // get the number of hours\n            var lNbHours = parseInt(aTimeInMs / (3600 * 60));\n            var lNbMinutes = parseInt((aTimeInMs % (3600 * 60)) / 3600);\n\n            // the date to return\n            var lDate = new Date();\n            lDate.setHours(lNbHours);\n            lDate.setMinutes(lNbMinutes);\n            lDate.setSeconds(0);\n            lDate.setMilliseconds(0);\n\n            return lDate;\n        }\n\n\n\n        vm.init();\n\n        function init() {\n\n            // decide whether the user is displaying his own information or if it is an administrator\n            // who is doing it\n            Principal.identity().then(function (account) {\n\n                vm.isSameUser = (account.login === vm.userLogin);\n\n            });\n\n            // get the displayed user's daily calories limit\n            User.get(\n                    {login: vm.userLogin},\n                    function (result) {\n                        vm.dailyCaloriesLimit = result.calories;\n                    });\n        }\n\n        function editMealInformation(aMealInformation) {\n            vm.openMealModal(aMealInformation);\n        }\n\n\n        // we load the meals on page initialization\n        vm.loadAll();\n\n\n        function loadAll() {\n\n            vm.isListMealsInformationLoading = true;\n\n            CaloriesService.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort(),\n                userLogin: vm.userLogin,\n                fromDate: vm.filterInformationForQuery.beginDate ? vm.filterInformationForQuery.beginDate : null,\n                toDate: vm.filterInformationForQuery.endDate ? vm.filterInformationForQuery.endDate : null,\n                fromTime: vm.filterInformationForQuery.beginTime ? vm.filterInformationForQuery.beginTime : null,\n                toTime: vm.filterInformationForQuery.endTime ? vm.filterInformationForQuery.endTime : null\n            }, onSuccess, onError);\n        }\n\n        function clearFilter() {\n            // we perform this action only if the user hasn't already initiated a loading action\n            if (!vm.isListMealsInformationLoading) {\n                vm.page = 1;\n\n                $state.transitionTo($state.$current, {\n                    page: vm.page,\n                    sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                    username: vm.userLogin,\n                    fromDate: null,\n                    toDate: null,\n                    fromTime: null,\n                    toTime: null\n                });\n            }\n\n        }\n\n        function loadMealsInformationByFilter() {\n\n            vm.filterErrorMessageToDisplay = null;\n\n\n            if (!vm.isFilterProcessing) {\n                vm.isFilterProcessing = true;\n\n                // we transform the different dates and times into ms\n\n                // Begin date\n                var lBeginDate = new Date(vm.filterInformationForScreen.beginDate);\n                lBeginDate.setHours(0);\n                lBeginDate.setMinutes(0);\n\n                lBeginDate = lBeginDate.getTime();\n\n                // End date\n                var lEndDate = new Date(vm.filterInformationForScreen.endDate);\n                lEndDate.setHours(23);\n                lEndDate.setMinutes(59);\n\n                lEndDate = lEndDate.getTime();\n\n                // Begin time\n                var lBeginTime = new Date(vm.filterInformationForScreen.beginTime);\n                var lNbHours = lBeginTime.getHours();\n                var lNbMinutes = lBeginTime.getMinutes();\n\n                lBeginTime = (((lNbHours * 60) + lNbMinutes) * 3600) - 10;\n\n                // End time\n                var lEndTime = new Date(vm.filterInformationForScreen.endTime);\n                lNbHours = lEndTime.getHours();\n                lNbMinutes = lEndTime.getMinutes();\n\n                lEndTime = (((lNbHours * 60) + lNbMinutes) * 3600) + 10;\n\n                if ((lBeginDate >= lEndDate) || (lEndTime <= lBeginTime)) {\n                    vm.filterErrorMessageToDisplay = $filter('translate')('calories.filter.errorMessage');\n                    vm.isFilterProcessing = false;\n                    return;\n                }\n\n                vm.page = 1;\n\n                $state.transitionTo($state.$current, {\n                    page: vm.page,\n                    sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                    username: vm.userLogin,\n                    fromDate: Number(lBeginDate),\n                    toDate: Number(lEndDate),\n                    fromTime: Number(lBeginTime),\n                    toTime: Number(lEndTime)\n                });\n            }\n        }\n\n        function checkLimit(aDate) {\n            if (vm.listCaloriesPerDay[aDate]) {\n                return (vm.listCaloriesPerDay[aDate] > vm.dailyCaloriesLimit);\n            }\n            return false;\n        }\n\n        function onSuccess(data, headers) {\n\n            vm.isFilterProcessing = false;\n\n            for (var i in data) {\n\n                if (data[i].userLogin) {\n\n                    var lMealInformation = data[i];\n\n                    //get the number of hours\n                    var lNbHours = parseInt(lMealInformation.time / (3600 * 60)) + '';\n\n                    if (lNbHours.length === 1) {\n                        lNbHours = '0' + lNbHours;\n                    }\n                    var lNbMinutes = parseInt((lMealInformation.time % (3600 * 60)) / 3600) + '';\n\n                    if (lNbMinutes.length === 1) {\n                        lNbMinutes = '0' + lNbMinutes;\n                    }\n\n                    lMealInformation.timeToDisplay = lNbHours + ':' + lNbMinutes;\n\n                    if (vm.listInformationByDate[lMealInformation.date]) {\n                        vm.listInformationByDate[lMealInformation.date].nbElts++;\n                    } else {\n                        var lInformationByDate = {\n                            nbElts: 1,\n                            index: i\n                        };\n                        vm.listInformationByDate[lMealInformation.date] = lInformationByDate;\n                    }\n\n\n\n                    if (vm.listCaloriesPerDay[lMealInformation.date]) {\n                        vm.listCaloriesPerDay[lMealInformation.date] += lMealInformation.calories;\n                    } else {\n                        vm.listCaloriesPerDay[lMealInformation.date] = lMealInformation.calories;\n                    }\n\n                    vm.mealInformationsSimpleList.push(lMealInformation);\n\n                }\n            }\n\n            vm.links = ParseLinks.parse(headers('link'));\n            vm.totalItems = headers('X-Total-Count');\n            vm.queryCount = vm.totalItems;\n            vm.page = pagingParams.page;\n\n            vm.isListMealsInformationLoading = false;\n\n        }\n\n        function onError(error) {\n            vm.isListMealsInformationLoading = false;\n            vm.isFilterProcessing = false;\n            AlertService.error(error.data.message);\n        }\n\n        function sort() {\n            var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n            if (vm.predicate !== 'id') {\n                result.push('id');\n            }\n            return result;\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                username: vm.userLogin,\n                fromDate: vm.filterInformationForQuery.beginDate ? vm.filterInformationForQuery.beginDate : null,\n                toDate: vm.filterInformationForQuery.endDate ? vm.filterInformationForQuery.endDate : null,\n                fromTime: vm.filterInformationForQuery.beginTime ? vm.filterInformationForQuery.beginTime : null,\n                toTime: vm.filterInformationForQuery.endTime ? vm.filterInformationForQuery.endTime : null\n            });\n        }\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('notificationInterceptor', notificationInterceptor);\n\n    notificationInterceptor.$inject = ['$q', 'AlertService'];\n\n    function notificationInterceptor ($q, AlertService) {\n        var service = {\n            response: response\n        };\n\n        return service;\n\n        function response (response) {\n            var headers = Object.keys(response.headers()).filter(function (header) {\n                return header.indexOf('app-alert', header.length - 'app-alert'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\n            }).sort();\n            var alertKey = response.headers(headers[0]);\n            if (angular.isString(alertKey)) {\n                AlertService.success(alertKey, { param : response.headers(headers[1])});\n            }\n            return response;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('errorHandlerInterceptor', errorHandlerInterceptor);\n\n    errorHandlerInterceptor.$inject = ['$q', '$rootScope'];\n\n    function errorHandlerInterceptor ($q, $rootScope) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError (response) {\n            if (!(response.status === 401 && (response.data === '' || (response.data.path && response.data.path.indexOf('/api/account') === 0 )))) {\n                $rootScope.$emit('caloappApp.httpError', response);\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('authExpiredInterceptor', authExpiredInterceptor);\n\n    authExpiredInterceptor.$inject = ['$rootScope', '$q', '$injector'];\n\n    function authExpiredInterceptor($rootScope, $q, $injector) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError(response) {\n            // If we have an unauthorized request we redirect to the login page\n            // Don't do this check on the account API to avoid infinite loop\n            if (response.status === 401 && angular.isDefined(response.data.path) && response.data.path.indexOf('/api/account') === -1) {\n                var Auth = $injector.get('Auth');\n                var to = $rootScope.toState;\n                var params = $rootScope.toStateParams;\n                Auth.logout();\n                if (to.name !== 'accessdenied') {\n                    Auth.storePreviousState(to.name, params);\n                }\n                var LoginService = $injector.get('LoginService');\n                LoginService.open();\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('translationHandler', translationHandler);\n\n    translationHandler.$inject = ['$rootScope', '$window', '$state', '$translate'];\n\n    function translationHandler($rootScope, $window, $state, $translate) {\n        return {\n            initialize: initialize,\n            updateTitle: updateTitle\n        };\n\n        function initialize() {\n            // if the current translation changes, update the window title\n            var translateChangeSuccess = $rootScope.$on('$translateChangeSuccess', function() {\n                updateTitle();\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(translateChangeSuccess) && translateChangeSuccess !== null){\n                    translateChangeSuccess();\n                }\n            });\n        }\n\n        // update the window title using params in the following\n        // precedence\n        // 1. titleKey parameter\n        // 2. $state.$current.data.pageTitle (current state page title)\n        // 3. 'global.title'\n        function updateTitle(titleKey) {\n            if (!titleKey && $state.$current.data && $state.$current.data.pageTitle) {\n                titleKey = $state.$current.data.pageTitle;\n            }\n            $translate(titleKey || 'global.title').then(function (title) {\n                $window.document.title = title;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('stateHandler', stateHandler);\n\n    stateHandler.$inject = ['$rootScope', '$state', '$sessionStorage', '$translate', 'JhiLanguageService', 'translationHandler', '$window',\n        'Auth', 'Principal', 'VERSION'];\n\n    function stateHandler($rootScope, $state, $sessionStorage, $translate, JhiLanguageService, translationHandler, $window,\n        Auth, Principal, VERSION) {\n        return {\n            initialize: initialize\n        };\n\n        function initialize() {\n            $rootScope.VERSION = VERSION;\n\n            var stateChangeStart = $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams, fromState) {\n                $rootScope.toState = toState;\n                $rootScope.toStateParams = toStateParams;\n                $rootScope.fromState = fromState;\n\n                // Redirect to a state with an external URL (http://stackoverflow.com/a/30221248/1098564)\n                if (toState.external) {\n                    event.preventDefault();\n                    $window.open(toState.url, '_self');\n                }\n\n                if (Principal.isIdentityResolved()) {\n                    Auth.authorize();\n                }\n\n                // Update the language\n                JhiLanguageService.getCurrent().then(function (language) {\n                    $translate.use(language);\n                });\n            });\n\n            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess',  function(event, toState, toParams, fromState, fromParams) {\n                var titleKey = 'global.title' ;\n\n                // Set the page title key to the one configured in state or use default one\n                if (toState.data.pageTitle) {\n                    titleKey = toState.data.pageTitle;\n                }\n                translationHandler.updateTitle(titleKey);\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\n                    stateChangeStart();\n                }\n                if(angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null){\n                    stateChangeSuccess();\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(paginationConfig);\n\n    paginationConfig.$inject = ['uibPaginationConfig', 'paginationConstants'];\n\n    function paginationConfig(uibPaginationConfig, paginationConstants) {\n        uibPaginationConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPaginationConfig.maxSize = 5;\n        uibPaginationConfig.boundaryLinks = true;\n        uibPaginationConfig.firstText = '«';\n        uibPaginationConfig.previousText = '‹';\n        uibPaginationConfig.nextText = '›';\n        uibPaginationConfig.lastText = '»';\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(pagerConfig);\n\n    pagerConfig.$inject = ['uibPagerConfig', 'paginationConstants'];\n\n    function pagerConfig(uibPagerConfig, paginationConstants) {\n        uibPagerConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPagerConfig.previousText = '«';\n        uibPagerConfig.nextText = '»';\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('translationStorageProvider', translationStorageProvider);\n\n    translationStorageProvider.$inject = ['$cookies', '$log', 'LANGUAGES'];\n\n    function translationStorageProvider($cookies, $log, LANGUAGES) {\n        return {\n            get: get,\n            put: put\n        };\n\n        function get(name) {\n            if (LANGUAGES.indexOf($cookies.getObject(name)) === -1) {\n                $log.info('Resetting invalid cookie language \"' + $cookies.getObject(name) + '\" to preferred language \"en\"');\n                $cookies.putObject(name, 'en');\n            }\n            return $cookies.getObject(name);\n        }\n\n        function put(name, value) {\n            $cookies.putObject(name, value);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(translationConfig);\n\n    translationConfig.$inject = ['$translateProvider', 'tmhDynamicLocaleProvider'];\n\n    function translationConfig($translateProvider, tmhDynamicLocaleProvider) {\n        // Initialize angular-translate\n        $translateProvider.useLoader('$translatePartialLoader', {\n            urlTemplate: 'i18n/{lang}/{part}.json'\n        });\n\n        $translateProvider.preferredLanguage('en');\n        $translateProvider.useStorage('translationStorageProvider');\n        $translateProvider.useSanitizeValueStrategy('escaped');\n        $translateProvider.addInterpolation('$translateMessageFormatInterpolation');\n\n        tmhDynamicLocaleProvider.localeLocationPattern('i18n/angular-locale_{{locale}}.js');\n        tmhDynamicLocaleProvider.useCookieStorage();\n        tmhDynamicLocaleProvider.storageKey('NG_TRANSLATE_LANG_KEY');\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(localStorageConfig);\n\n    localStorageConfig.$inject = ['$localStorageProvider', '$sessionStorageProvider'];\n\n    function localStorageConfig($localStorageProvider, $sessionStorageProvider) {\n        $localStorageProvider.setKeyPrefix('jhi-');\n        $sessionStorageProvider.setKeyPrefix('jhi-');\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(httpConfig);\n\n    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', 'httpRequestInterceptorCacheBusterProvider', '$urlMatcherFactoryProvider'];\n\n    function httpConfig($urlRouterProvider, $httpProvider, httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\n        //Cache everything except rest api requests\n        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\n\n        $urlRouterProvider.otherwise('/');\n\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\n        $httpProvider.interceptors.push('authExpiredInterceptor');\n        $httpProvider.interceptors.push('notificationInterceptor');\n        // jhipster-needle-angularjs-add-interceptor JHipster will add new application http interceptor here\n\n        $urlMatcherFactoryProvider.type('boolean', {\n            name : 'boolean',\n            decode: function(val) { return val === true || val === 'true'; },\n            encode: function(val) { return val ? 1 : 0; },\n            equals: function(a, b) { return this.is(a) && a === b; },\n            is: function(val) { return [true,false,0,1].indexOf(val) >= 0; },\n            pattern: /bool|true|0|1/\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(compileServiceConfig);\n\n    compileServiceConfig.$inject = ['$compileProvider','DEBUG_INFO_ENABLED'];\n\n    function compileServiceConfig($compileProvider,DEBUG_INFO_ENABLED) {\n        // disable debug data on prod profile to improve performance\n        $compileProvider.debugInfoEnabled(DEBUG_INFO_ENABLED);\n\n        /*\n        If you wish to debug an application with this information\n        then you should open up a debug console in the browser\n        then call this method directly in this console:\n\n\t\tangular.reloadWithDebugInfo();\n\t\t*/\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .config(bootstrapMaterialDesignConfig);\n\n    bootstrapMaterialDesignConfig.$inject = [];\n\n    function bootstrapMaterialDesignConfig() {\n        $.material.init();\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(alertServiceConfig);\n\n    alertServiceConfig.$inject = ['AlertServiceProvider'];\n\n    function alertServiceConfig(AlertServiceProvider) {\n        // set below to true to make alerts look like toast\n        AlertServiceProvider.showAsToast(false);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('app', {\n            abstract: true,\n            views: {\n                'navbar@': {\n                    templateUrl: 'app/layouts/navbar/navbar.html',\n                    controller: 'NavbarController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                authorize: ['Auth',\n                    function (Auth) {\n                        return Auth.authorize();\n                    }\n                ],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('global');\n                }]\n            }\n        });\n    }\n})();\n","(function () {\n    'use strict';\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('caloappApp')\n        .constant('VERSION', \"0.0.1\")\n        .constant('DEBUG_INFO_ENABLED', false)\n;\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .controller('UserManagementDialogController', UserManagementDialogController);\n\n    UserManagementDialogController.$inject = ['$stateParams', '$uibModalInstance', 'entity', 'User', 'JhiLanguageService',\n        '$window', 'Principal', '$rootScope'];\n\n    function UserManagementDialogController($stateParams, $uibModalInstance, entity, User, JhiLanguageService,\n            $window, Principal, $rootScope) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN', 'ROLE_USERS_MANAGER'];\n        vm.clear = clear;\n        vm.languages = null;\n        vm.save = save;\n        vm.user = entity;\n\n\n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n\n        function clear() {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function onSaveSuccess(result) {\n            vm.isSaving = false;\n            $uibModalInstance.close(result);\n\n            Principal.identity().then(function (account) {\n                if (account.login === result.login) {\n\n                    Principal.authenticate(result);\n                    $rootScope.$broadcast('update-authorities');\n\n                }\n            });\n\n        }\n\n        function onSaveError() {\n            vm.isSaving = false;\n        }\n\n        function save() {\n            vm.isSaving = true;\n            if (vm.user.id !== null) {\n                User.update(vm.user, onSaveSuccess, onSaveError);\n            } else {\n                User.save(vm.user, onSaveSuccess, onSaveError);\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .controller('UserManagementDetailController', UserManagementDetailController);\n\n    UserManagementDetailController.$inject = ['$stateParams', 'User'];\n\n    function UserManagementDetailController ($stateParams, User) {\n        var vm = this;\n\n        vm.load = load;\n        vm.user = {};\n\n        vm.load($stateParams.login);\n\n        function load (login) {\n            User.get({login: login}, function(result) {\n                vm.user = result;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .controller('UserManagementDeleteController', UserManagementDeleteController);\n\n    UserManagementDeleteController.$inject = ['$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDeleteController ($uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.user = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (login) {\n            User.delete({login: login},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n                .state('user-management', {\n                    parent: 'admin',\n                    url: '/user-management?page&sort',\n                    data: {\n                        authorities: ['ROLE_ADMIN', 'ROLE_USERS_MANAGER'],\n                        pageTitle: 'userManagement.home.title'\n                    },\n                    views: {\n                        'content@': {\n                            templateUrl: 'app/admin/user-management/user-management.html',\n                            controller: 'UserManagementController',\n                            controllerAs: 'vm'\n                        }\n                    }, params: {\n                        page: {\n                            value: '1',\n                            squash: true\n                        },\n                        sort: {\n                            value: 'id,asc',\n                            squash: true\n                        }\n                    },\n                    resolve: {\n                        pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                                return {\n                                    page: PaginationUtil.parsePage($stateParams.page),\n                                    sort: $stateParams.sort,\n                                    predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                                    ascending: PaginationUtil.parseAscending($stateParams.sort)\n                                };\n                            }],\n                        translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                                $translatePartialLoader.addPart('user-management');\n                                return $translate.refresh();\n                            }]\n\n                    }})\n                .state('user-management-detail', {\n                    parent: 'admin',\n                    url: '/user/:login',\n                    data: {\n                        authorities: ['ROLE_ADMIN', 'ROLE_USERS_MANAGER'],\n                        pageTitle: 'user-management.detail.title'\n                    },\n                    views: {\n                        'content@': {\n                            templateUrl: 'app/admin/user-management/user-management-detail.html',\n                            controller: 'UserManagementDetailController',\n                            controllerAs: 'vm'\n                        }\n                    },\n                    resolve: {\n                        translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                                $translatePartialLoader.addPart('user-management');\n                                return $translate.refresh();\n                            }]\n                    }\n                })\n                .state('user-management.new', {\n                    parent: 'user-management',\n                    url: '/new',\n                    data: {\n                        authorities: ['ROLE_ADMIN', 'ROLE_USERS_MANAGER']\n                    },\n                    onEnter: ['$stateParams', '$state', '$uibModal', function ($stateParams, $state, $uibModal) {\n                            $uibModal.open({\n                                templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                                controller: 'UserManagementDialogController',\n                                controllerAs: 'vm',\n                                backdrop: 'static',\n                                size: 'lg',\n                                resolve: {\n                                    entity: function () {\n                                        return {\n                                            id: null, login: null, firstName: null, lastName: null, email: null,\n                                            activated: true, langKey: null, createdBy: null, createdDate: null,\n                                            lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                                            resetKey: null, authorities: null\n                                        };\n                                    }\n                                }\n                            }).result.then(function () {\n                                $state.go('user-management', null, {reload: true});\n                            }, function () {\n                                $state.go('user-management');\n                            });\n                        }]\n                })\n                .state('user-management.edit', {\n                    parent: 'user-management',\n                    url: '/{login}/edit',\n                    data: {\n                        authorities: ['ROLE_ADMIN', 'ROLE_USERS_MANAGER']\n                    },\n                    onEnter: ['$stateParams', '$state', '$uibModal', function ($stateParams, $state, $uibModal) {\n                            $uibModal.open({\n                                templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                                controller: 'UserManagementDialogController',\n                                controllerAs: 'vm',\n                                backdrop: 'static',\n                                size: 'lg',\n                                resolve: {\n                                    entity: ['User', function (User) {\n                                            return User.get({login: $stateParams.login});\n                                        }]\n                                }\n                            }).result.then(function () {\n                                $state.go('user-management', null, {reload: true});\n                            }, function () {\n                                $state.go('^');\n                            });\n                        }]\n                })\n                .state('user-management.delete', {\n                    parent: 'user-management',\n                    url: '/{login}/delete',\n                    data: {\n                        authorities: ['ROLE_ADMIN', 'ROLE_USERS_MANAGER']\n                    },\n                    onEnter: ['$stateParams', '$state', '$uibModal', function ($stateParams, $state, $uibModal) {\n                            $uibModal.open({\n                                templateUrl: 'app/admin/user-management/user-management-delete-dialog.html',\n                                controller: 'UserManagementDeleteController',\n                                controllerAs: 'vm',\n                                size: 'md',\n                                resolve: {\n                                    entity: ['User', function (User) {\n                                            return User.get({login: $stateParams.login});\n                                        }]\n                                }\n                            }).result.then(function () {\n                                $state.go('user-management', null, {reload: true});\n                            }, function () {\n                                $state.go('^');\n                            });\n                        }]\n                });\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .controller('UserManagementController', UserManagementController);\n\n    UserManagementController.$inject = ['Principal', 'User', 'ParseLinks', 'AlertService', '$state', 'pagingParams', 'paginationConstants', 'JhiLanguageService'];\n\n    function UserManagementController(Principal, User, ParseLinks, AlertService, $state, pagingParams, paginationConstants, JhiLanguageService) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN', 'ROLE_USERS_MANAGER'];\n        vm.currentAccount = null;\n        vm.languages = null;\n        vm.loadAll = loadAll;\n        vm.setActive = setActive;\n        vm.users = [];\n        vm.page = 1;\n        vm.totalItems = null;\n        vm.clear = clear;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.transition = transition;\n        // method called to display/edit a user's meals information\n        vm.editUserMealsInformation = editUserMealsInformation;\n\n\n        vm.loadAll();\n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n        Principal.identity().then(function (account) {\n            vm.currentAccount = account;\n        });\n\n        function setActive(user, isActivated) {\n            user.activated = isActivated;\n            User.update(user, function () {\n                vm.loadAll();\n                vm.clear();\n            });\n        }\n\n        function loadAll() {\n            User.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n        }\n\n        function onSuccess(data, headers) {\n            // deactivate all actions on anonymous user from user management: it's a required user for Spring Security\n            for (var i in data) {\n                if (data[i]['login'] === 'anonymoususer') {\n                    data[i]['isAnonymous'] = true;\n                }\n            }\n            vm.links = ParseLinks.parse(headers('link'));\n            vm.totalItems = headers('X-Total-Count');\n            vm.queryCount = vm.totalItems;\n            vm.page = pagingParams.page;\n            vm.users = data;\n        }\n\n        function onError(error) {\n            AlertService.error(error.data.message);\n        }\n\n        function clear() {\n            vm.user = {\n                id: null, login: null, firstName: null, lastName: null, email: null,\n                activated: null, langKey: null, createdBy: null, createdDate: null,\n                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                resetKey: null, authorities: null\n            };\n        }\n\n        function sort() {\n            var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n            if (vm.predicate !== 'id') {\n                result.push('id');\n            }\n            return result;\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function editUserMealsInformation(aUserLogin) {\n            $state.go('user-calories', {'username': aUserLogin});\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('docs', {\n            parent: 'admin',\n            url: '/docs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'global.menu.admin.apidocs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/docs/docs.html'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', function ($translate) {\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('admin', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('settings', {\n            parent: 'account',\n            url: '/settings',\n            data: {\n                authorities: ['ROLE_USER', 'ROLE_ADMIN', 'ROLE_USERS_MANAGER'],\n                pageTitle: 'global.menu.account.settings'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/settings/settings.html',\n                    controller: 'SettingsController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        $translatePartialLoader.addPart('settings');\n                        return $translate.refresh();\n                    }]\n            }\n        });\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .controller('SettingsController', SettingsController);\n\n    SettingsController.$inject = ['Principal', 'Auth', 'JhiLanguageService', '$translate'];\n\n    function SettingsController(Principal, Auth, JhiLanguageService, $translate) {\n        var vm = this;\n\n        vm.error = null;\n        vm.save = save;\n        vm.settingsAccount = null;\n        vm.success = null;\n\n        /**\n         * Store the \"settings account\" in a separate variable, and not in the shared \"account\" variable.\n         */\n        var copyAccount = function (account) {\n            return {\n                activated: account.activated,\n                email: account.email,\n                firstName: account.firstName,\n                langKey: account.langKey,\n                lastName: account.lastName,\n                login: account.login,\n                calories: account.calories\n            };\n        };\n\n        Principal.identity().then(function (account) {\n            vm.settingsAccount = copyAccount(account);\n        });\n\n        function save() {\n            Auth.updateAccount(vm.settingsAccount).then(function () {\n                vm.error = null;\n                vm.success = 'OK';\n                Principal.identity(true).then(function (account) {\n                    vm.settingsAccount = copyAccount(account);\n                });\n                JhiLanguageService.getCurrent().then(function (current) {\n                    if (vm.settingsAccount.langKey !== current) {\n                        $translate.use(vm.settingsAccount.langKey);\n                    }\n                });\n            }).catch(function () {\n                vm.success = null;\n                vm.error = 'ERROR';\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('requestReset', {\n            parent: 'account',\n            url: '/reset/request',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/request/reset.request.html',\n                    controller: 'RequestResetController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('reset');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .controller('RequestResetController', RequestResetController);\n\n    RequestResetController.$inject = ['$timeout', 'Auth'];\n\n    function RequestResetController ($timeout, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.errorEmailNotExists = null;\n        vm.requestReset = requestReset;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#email').focus();});\n\n        function requestReset () {\n\n            vm.error = null;\n            vm.errorEmailNotExists = null;\n\n            Auth.resetPasswordInit(vm.resetAccount.email).then(function () {\n                vm.success = 'OK';\n            }).catch(function (response) {\n                vm.success = null;\n                if (response.status === 400 && response.data === 'e-mail address not registered') {\n                    vm.errorEmailNotExists = 'ERROR';\n                } else {\n                    vm.error = 'ERROR';\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('finishReset', {\n            parent: 'account',\n            url: '/reset/finish?key',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/finish/reset.finish.html',\n                    controller: 'ResetFinishController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('reset');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .controller('ResetFinishController', ResetFinishController);\n\n    ResetFinishController.$inject = ['$stateParams', '$timeout', 'Auth', 'LoginService'];\n\n    function ResetFinishController($stateParams, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.keyMissing = angular.isUndefined($stateParams.key);\n        vm.confirmPassword = null;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.finishReset = finishReset;\n        vm.login = LoginService.open;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function () {\n            angular.element('#password').focus();\n        });\n\n        function finishReset() {\n            vm.doNotMatch = null;\n            vm.error = null;\n            if (vm.resetAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                Auth.resetPasswordFinish({key: $stateParams.key, newPassword: vm.resetAccount.password}).then(function () {\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('register', {\n            parent: 'account',\n            url: '/register',\n            data: {\n                authorities: [],\n                pageTitle: 'register.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/register/register.html',\n                    controller: 'RegisterController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('register');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .controller('RegisterController', RegisterController);\n\n\n    RegisterController.$inject = ['$translate', '$timeout', 'Auth', 'LoginService'];\n\n    function RegisterController($translate, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.errorUserExists = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        vm.registerAccount = {};\n        vm.success = null;\n\n        $timeout(function () {\n            angular.element('#login').focus();\n        });\n\n        function register() {\n            if (vm.registerAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.registerAccount.langKey = $translate.use();\n                vm.doNotMatch = null;\n                vm.error = null;\n                vm.errorUserExists = null;\n                vm.errorEmailExists = null;\n\n                Auth.createAccount(vm.registerAccount).then(function () {\n                    vm.success = 'OK';\n                }).catch(function (response) {\n                    vm.success = null;\n                    if (response.status === 400 && response.data === 'login already in use') {\n                        vm.errorUserExists = 'ERROR';\n                    } else if (response.status === 400 && response.data === 'e-mail address already in use') {\n                        vm.errorEmailExists = 'ERROR';\n                    } else {\n                        vm.error = 'ERROR';\n                    }\n                });\n            }\n        }\n    }\n})();\n","/* globals $ */\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .directive('passwordStrengthBar', passwordStrengthBar);\n\n    function passwordStrengthBar () {\n        var directive = {\n            replace: true,\n            restrict: 'E',\n            template: '<div id=\"strength\">' +\n                '<small data-translate=\"global.messages.validate.newpassword.strength\">Password strength:</small>' +\n                '<ul id=\"strengthBar\">' +\n                '<li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li>' +\n                '</ul>' +\n                '</div>',\n            scope: {\n                passwordToCheck: '='\n            },\n            link: linkFunc\n        };\n\n        return directive;\n\n        /* private helper methods*/\n\n        function linkFunc(scope, iElement) {\n            var strength = {\n                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],\n                mesureStrength: function (p) {\n\n                    var _force = 0;\n                    var _regex = /[$-/:-?{-~!\"^_`\\[\\]]/g; // \"\n\n                    var _lowerLetters = /[a-z]+/.test(p);\n                    var _upperLetters = /[A-Z]+/.test(p);\n                    var _numbers = /[0-9]+/.test(p);\n                    var _symbols = _regex.test(p);\n\n                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];\n                    var _passedMatches = $.grep(_flags, function (el) {\n                        return el === true;\n                    }).length;\n\n                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);\n                    _force += _passedMatches * 10;\n\n                    // penalty (short password)\n                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;\n\n                    // penalty (poor variety of characters)\n                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;\n                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;\n                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;\n\n                    return _force;\n\n                },\n                getColor: function (s) {\n\n                    var idx;\n                    if (s <= 10) {\n                        idx = 0;\n                    }\n                    else if (s <= 20) {\n                        idx = 1;\n                    }\n                    else if (s <= 30) {\n                        idx = 2;\n                    }\n                    else if (s <= 40) {\n                        idx = 3;\n                    }\n                    else {\n                        idx = 4;\n                    }\n\n                    return { idx: idx + 1, col: this.colors[idx] };\n                }\n            };\n            scope.$watch('passwordToCheck', function (password) {\n                if (password) {\n                    var c = strength.getColor(strength.mesureStrength(password));\n                    iElement.removeClass('ng-hide');\n                    iElement.find('ul').children('li')\n                        .css({ 'background-color': '#DDD' })\n                        .slice(0, c.idx)\n                        .css({ 'background-color': c.col });\n                }\n            });\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('password', {\n            parent: 'account',\n            url: '/password',\n            data: {\n                authorities: ['ROLE_USER', 'ROLE_ADMIN', 'ROLE_USERS_MANAGER'],\n                pageTitle: 'global.menu.account.password'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/password/password.html',\n                    controller: 'PasswordController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        $translatePartialLoader.addPart('password');\n                        return $translate.refresh();\n                    }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .controller('PasswordController', PasswordController);\n\n    PasswordController.$inject = ['Auth', 'Principal'];\n\n    function PasswordController (Auth, Principal) {\n        var vm = this;\n\n        vm.changePassword = changePassword;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.success = null;\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function changePassword () {\n            if (vm.password !== vm.confirmPassword) {\n                vm.error = null;\n                vm.success = null;\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.doNotMatch = null;\n                Auth.changePassword(vm.password).then(function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('activate', {\n            parent: 'account',\n            url: '/activate?key',\n            data: {\n                authorities: [],\n                pageTitle: 'activate.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/activate/activate.html',\n                    controller: 'ActivationController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('activate');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .controller('ActivationController', ActivationController);\n\n    ActivationController.$inject = ['$stateParams', 'Auth', 'LoginService'];\n\n    function ActivationController($stateParams, Auth, LoginService) {\n        var vm = this;\n\n        Auth.activateAccount({key: $stateParams.key}).then(function () {\n            vm.error = null;\n            vm.success = 'OK';\n        }).catch(function () {\n            vm.success = null;\n            vm.error = 'ERROR';\n        });\n\n        vm.login = LoginService.open;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('account', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp', [\n                'ngStorage',\n                'tmh.dynamicLocale',\n                'pascalprecht.translate',\n                'ngResource',\n                'ngCookies',\n                'ngAria',\n                'ngCacheBuster',\n                'ngFileUpload',\n                'ui.bootstrap',\n                'ui.bootstrap.datetimepicker',\n                'ui.router',\n                'infinite-scroll',\n                // jhipster-needle-angularjs-add-module JHipster will add new module here\n                'angular-loading-bar',\n                'angularSpinner'\n            ])\n            .run(run);\n\n    run.$inject = ['stateHandler', 'translationHandler'];\n\n    function run(stateHandler, translationHandler) {\n        stateHandler.initialize();\n        translationHandler.initialize();\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('User', User);\n\n    User.$inject = ['$resource'];\n\n    function User ($resource) {\n        var service = $resource('api/users/:login', {}, {\n            'query': {method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'save': { method:'POST' },\n            'update': { method:'PUT' },\n            'delete':{ method:'DELETE'}\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('ProfileService', ProfileService);\n\n    ProfileService.$inject = ['$http'];\n\n    function ProfileService($http) {\n\n        var dataPromise;\n\n        var service = {\n            getProfileInfo : getProfileInfo\n        };\n\n        return service;\n\n        function getProfileInfo() {\n            if (angular.isUndefined(dataPromise)) {\n                dataPromise = $http.get('api/profile-info').then(function(result) {\n                    if (result.data.activeProfiles) {\n                        var response = {};\n                        response.activeProfiles = result.data.activeProfiles;\n                        response.ribbonEnv = result.data.ribbonEnv;\n                        response.inProduction = result.data.activeProfiles.indexOf(\"prod\") !== -1;\n                        response.swaggerEnabled = result.data.activeProfiles.indexOf(\"swagger\") !== -1;\n                        return response;\n                    }\n                });\n            }\n            return dataPromise;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .directive('pageRibbon', pageRibbon);\n\n    pageRibbon.$inject = ['ProfileService', '$rootScope', '$translate'];\n\n    function pageRibbon(ProfileService, $rootScope, $translate) {\n        var directive = {\n            replace : true,\n            restrict : 'AE',\n            template : '<div class=\"ribbon hidden\"><a href=\"\" translate=\"global.ribbon.{{ribbonEnv}}\">{{ribbonEnv}}</a></div>',\n            link : linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            ProfileService.getProfileInfo().then(function(response) {\n                if (response.ribbonEnv) {\n                    scope.ribbonEnv = response.ribbonEnv;\n                    element.addClass(response.ribbonEnv);\n                    element.removeClass('hidden');\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('Sessions', Sessions);\n\n    Sessions.$inject = ['$resource'];\n\n    function Sessions ($resource) {\n        return $resource('api/account/sessions/:series', {}, {\n            'getAll': { method: 'GET', isArray: true}\n        });\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('Register', Register);\n\n    Register.$inject = ['$resource'];\n\n    function Register ($resource) {\n        return $resource('api/register', {}, {});\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .factory('Principal', Principal);\n\n    Principal.$inject = ['$q', 'Account'];\n\n    function Principal($q, Account) {\n        var _identity,\n                _authenticated = false;\n\n        var service = {\n            authenticate: authenticate,\n            hasAnyAuthority: hasAnyAuthority,\n            hasAuthority: hasAuthority,\n            identity: identity,\n            isAuthenticated: isAuthenticated,\n            isIdentityResolved: isIdentityResolved,\n        };\n\n        return service;\n\n        function authenticate(identity) {\n            _identity = identity;\n            _authenticated = identity !== null;\n        }\n\n        function hasAnyAuthority(authorities) {\n            if (!_authenticated || !_identity || !_identity.authorities) {\n                return false;\n            }\n\n            for (var i = 0; i < authorities.length; i++) {\n                if (_identity.authorities.indexOf(authorities[i]) !== -1) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function hasAuthority(authority) {\n            if (!_authenticated) {\n                return $q.when(false);\n            }\n\n            return this.identity().then(function (_id) {\n                return _id.authorities && _id.authorities.indexOf(authority) !== -1;\n            }, function () {\n                return false;\n            });\n        }\n\n        function identity(force) {\n            var deferred = $q.defer();\n\n\n            if (force === true) {\n                _identity = undefined;\n\n            }\n\n            // check and see if we have retrieved the identity data from the server.\n            // if we have, reuse it by immediately resolving\n            if (angular.isDefined(_identity)) {\n                deferred.resolve(_identity);\n\n\n                return deferred.promise;\n            }\n\n            // retrieve the identity data from the server, update the identity object, and then resolve.\n            Account.get().$promise\n                    .then(getAccountThen)\n                    .catch(getAccountCatch);\n\n            return deferred.promise;\n\n            function getAccountThen(account) {\n                _identity = account.data;\n                _authenticated = true;\n                deferred.resolve(_identity);\n            }\n\n            function getAccountCatch() {\n                _identity = null;\n                _authenticated = false;\n                deferred.resolve(_identity);\n            }\n        }\n\n        function isAuthenticated() {\n            return _authenticated;\n        }\n\n        function isIdentityResolved() {\n            return angular.isDefined(_identity);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('PasswordResetInit', PasswordResetInit);\n\n    PasswordResetInit.$inject = ['$resource'];\n\n    function PasswordResetInit($resource) {\n        var service = $resource('api/account/reset_password/init', {}, {});\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('PasswordResetFinish', PasswordResetFinish);\n\n    PasswordResetFinish.$inject = ['$resource'];\n\n    function PasswordResetFinish($resource) {\n        var service = $resource('api/account/reset_password/finish', {}, {});\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('Password', Password);\n\n    Password.$inject = ['$resource'];\n\n    function Password($resource) {\n        var service = $resource('api/account/change_password', {}, {});\n\n        return service;\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .directive('hasAuthority', hasAuthority);\n\n    hasAuthority.$inject = ['Principal'];\n\n    function hasAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\n\n            var setVisible = function () {\n                element.removeClass('hidden');\n            };\n            var setHidden = function () {\n                element.addClass('hidden');\n            };\n            var defineVisibility = function (reset) {\n\n                if (reset) {\n                    setVisible();\n                }\n\n                Principal.hasAuthority(authority)\n                        .then(function (result) {\n\n                            if (result) {\n                                setVisible();\n                            } else {\n                                setHidden();\n                            }\n                        });\n            };\n\n            if (authority.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function () {\n                    return Principal.isAuthenticated();\n                }, function () {\n                    defineVisibility(true);\n                });\n            }\n\n            // we catch the user's role changement to update some components visbility\n            scope.$on(\n                    'update-authorities',\n                    function () {\n                        defineVisibility(true);\n                    }\n            );\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .directive('hasAnyAuthority', hasAnyAuthority);\n\n    hasAnyAuthority.$inject = ['Principal'];\n\n    function hasAnyAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\n\n            var setVisible = function () {\n                element.removeClass('hidden');\n            },\n                    setHidden = function () {\n                        element.addClass('hidden');\n                    },\n                    defineVisibility = function (reset) {\n                        var result;\n                        if (reset) {\n                            setVisible();\n                        }\n\n                        result = Principal.hasAnyAuthority(authorities);\n                        if (result) {\n                            setVisible();\n                        } else {\n                            setHidden();\n                        }\n                    };\n\n            if (authorities.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function () {\n                    return Principal.isAuthenticated();\n                }, function () {\n                    defineVisibility(true);\n                });\n            }\n\n            // we catch the user's role changement to update some components visbility\n            scope.$on(\n                    'update-authorities',\n                    function () {\n                        defineVisibility(true);\n                    }\n            );\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .factory('AuthServerProvider', AuthServerProvider);\n\n    AuthServerProvider.$inject = ['$http', '$localStorage'];\n\n    function AuthServerProvider($http, $localStorage) {\n        var service = {\n            getToken: getToken,\n            hasValidToken: hasValidToken,\n            login: login,\n            logout: logout\n        };\n\n        return service;\n\n        function getToken() {\n            var token = $localStorage.authenticationToken;\n            return token;\n        }\n\n        function hasValidToken() {\n            var token = this.getToken();\n            return !!token;\n        }\n\n        function login(credentials) {\n            var data = 'j_username=' + encodeURIComponent(credentials.username) +\n                    '&j_password=' + encodeURIComponent(credentials.password) +\n                    '&remember-me=' + credentials.rememberMe + '&submit=Login';\n\n            return $http.post('api/authentication', data, {\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }).success(function (response) {\n                return response;\n            });\n        }\n\n        function logout() {\n\n            // logout from the server\n            $http.post('api/logout').success(function (response) {\n                delete $localStorage.authenticationToken;\n                // to get a new csrf token call the api\n                $http.get('api/account');\n                return response;\n            });\n\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .factory('Auth', Auth);\n\n    Auth.$inject = ['$rootScope', '$state', '$sessionStorage', '$q', '$translate', 'Principal', 'AuthServerProvider', 'Account', 'LoginService', 'Register', 'Activate', 'Password', 'PasswordResetInit', 'PasswordResetFinish'];\n\n    function Auth($rootScope, $state, $sessionStorage, $q, $translate, Principal, AuthServerProvider, Account, LoginService, Register, Activate, Password, PasswordResetInit, PasswordResetFinish) {\n        var service = {\n            activateAccount: activateAccount,\n            authorize: authorize,\n            changePassword: changePassword,\n            createAccount: createAccount,\n            getPreviousState: getPreviousState,\n            login: login,\n            logout: logout,\n            resetPasswordFinish: resetPasswordFinish,\n            resetPasswordInit: resetPasswordInit,\n            resetPreviousState: resetPreviousState,\n            storePreviousState: storePreviousState,\n            updateAccount: updateAccount\n        };\n\n        return service;\n\n        function activateAccount(key, callback) {\n            var cb = callback || angular.noop;\n\n            return Activate.get(key,\n                    function (response) {\n                        return cb(response);\n                    },\n                    function (err) {\n                        return cb(err);\n                    }.bind(this)).$promise;\n        }\n\n        function authorize(force) {\n\n            var authReturn = Principal.identity(force).then(authThen);\n\n            return authReturn;\n\n            function authThen(account) {\n                var isAuthenticated = Principal.isAuthenticated();\n\n                // an authenticated user can't access to login and register pages\n                if (isAuthenticated && ($rootScope.toState.parent === 'account' || $rootScope.toState.parent === 'app') && ($rootScope.toState.name === 'home' || $rootScope.toState.name === 'login' || $rootScope.toState.name === 'register')) {\n\n                    if (account) {\n\n                        // case the user has the role ROLE_ADMIN or ROLE_USERS_MANAGER\n                        // we redirect him to the users manager screen\n                        if (account.authorities.indexOf('ROLE_ADMIN') >= 0 || account.authorities.indexOf('ROLE_USERS_MANAGER') >= 0) {\n                            $state.go('user-management', null, {reload: true});\n                        }\n                        // else we will redirect him to the calories screen\n                        else {\n                            $state.go('user-calories', {'username': account.login});\n                        }\n\n                    }\n\n                }\n\n                // recover and clear previousState after external login redirect (e.g. oauth2)\n//                if (isAuthenticated && !$rootScope.fromState.name && getPreviousState()) {\n//                    var previousState = getPreviousState();\n//                    resetPreviousState();\n//                    $state.go(previousState.name, previousState.params);\n//                }\n\n                if ($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities)) {\n                    if (isAuthenticated) {\n                        // user is signed in but not authorized for desired state\n                        $state.go('accessdenied');\n                    } else {\n                        // user is not authenticated. stow the state they wanted before you\n                        // send them to the login service, so you can return them when you're done\n                        storePreviousState($rootScope.toState.name, $rootScope.toStateParams);\n\n                        // now, send them to the signin state so they can log in\n                        $state.go('accessdenied').then(function () {\n                            LoginService.open();\n                        });\n                    }\n                }\n            }\n        }\n\n        function changePassword(newPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return Password.save(newPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function createAccount(account, callback) {\n            var cb = callback || angular.noop;\n\n            return Register.save(account,\n                    function () {\n                        return cb(account);\n                    },\n                    function (err) {\n                        this.logout();\n                        return cb(err);\n                    }.bind(this)).$promise;\n        }\n\n        function login(credentials, callback) {\n            var cb = callback || angular.noop;\n            var deferred = $q.defer();\n\n            AuthServerProvider.login(credentials)\n                    .then(loginThen)\n                    .catch(function (err) {\n                        this.logout();\n                        deferred.reject(err);\n                        return cb(err);\n                    }.bind(this));\n\n            function loginThen(data) {\n\n                Principal.identity(true).then(function (account) {\n                    // After the login the language will be changed to\n                    // the language selected by the user during his registration\n                    if (account !== null) {\n                        $translate.use(account.langKey).then(function () {\n                            $translate.refresh();\n                        });\n                    }\n\n                    deferred.resolve(data);\n                });\n                return cb();\n            }\n\n            return deferred.promise;\n        }\n\n\n        function logout() {\n            AuthServerProvider.logout();\n            Principal.authenticate(null);\n        }\n\n        function resetPasswordFinish(keyAndPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetFinish.save(keyAndPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function resetPasswordInit(mail, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetInit.save(mail, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function updateAccount(account, callback) {\n            var cb = callback || angular.noop;\n\n            return Account.save(account,\n                    function () {\n                        return cb(account);\n                    },\n                    function (err) {\n                        return cb(err);\n                    }.bind(this)).$promise;\n        }\n\n        function getPreviousState() {\n            var previousState = $sessionStorage.previousState;\n            return previousState;\n        }\n\n        function resetPreviousState() {\n            delete $sessionStorage.previousState;\n        }\n\n        function storePreviousState(previousStateName, previousStateParams) {\n            var previousState = {\"name\": previousStateName, \"params\": previousStateParams};\n            $sessionStorage.previousState = previousState;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('Activate', Activate);\n\n    Activate.$inject = ['$resource'];\n\n    function Activate ($resource) {\n        var service = $resource('api/activate', {}, {\n            'get': { method: 'GET', params: {}, isArray: false}\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('Account', Account);\n\n    Account.$inject = ['$resource'];\n\n    function Account ($resource) {\n        var service = $resource('api/account', {}, {\n            'get': { method: 'GET', params: {}, isArray: false,\n                interceptor: {\n                    response: function(response) {\n                        // expose response\n                        return response;\n                    }\n                }\n            }\n        });\n\n        return service;\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .controller('NavbarController', NavbarController);\n\n    NavbarController.$inject = ['$state', 'Auth', 'Principal', 'ProfileService', 'LoginService'];\n\n    function NavbarController($state, Auth, Principal, ProfileService, LoginService) {\n        var vm = this;\n\n        vm.isNavbarCollapsed = true;\n        vm.isAuthenticated = Principal.isAuthenticated;\n\n        ProfileService.getProfileInfo().then(function (response) {\n            vm.inProduction = response.inProduction;\n            vm.swaggerEnabled = response.swaggerEnabled;\n        });\n\n        vm.login = login;\n        vm.logout = logout;\n        vm.toggleNavbar = toggleNavbar;\n        vm.collapseNavbar = collapseNavbar;\n        vm.$state = $state;\n\n        // this function is called to redirect the user to the home screen depending\n        // on the fact he is connected or not and on the roles he has\n        vm.goHome = goHome;\n\n        // this method redirects the user to the calories screen\n        vm.goToMyCalories = goToMyCalories;\n\n        function login() {\n            collapseNavbar();\n            LoginService.open();\n        }\n\n        function logout() {\n            collapseNavbar();\n            Auth.logout();\n            $state.go('home');\n        }\n\n        function toggleNavbar() {\n            vm.isNavbarCollapsed = !vm.isNavbarCollapsed;\n        }\n\n        function collapseNavbar() {\n            vm.isNavbarCollapsed = true;\n        }\n\n        function goHome() {\n            if (!vm.isAuthenticated()) {\n                $state.go('home');\n            } else {\n\n\n                Principal.identity().then(function (account) {\n                    vm.account = account;\n\n                    if (vm.account) {\n\n                        // case the user has the role ROLE_ADMIN or ROLE_USERS_MANAGER\n                        // we redirect him to the users manager screen\n                        if (vm.account.authorities.indexOf('ROLE_ADMIN') >= 0 || vm.account.authorities.indexOf('ROLE_USERS_MANAGER') >= 0) {\n                            $state.go('user-management', null, {reload: true});\n                        }\n                        // else we will redirect him to the calories screen\n                        else {\n                            $state.go('user-calories', {'username': vm.account.login});\n                        }\n\n                    }\n\n                });\n\n\n            }\n        }\n\n        function goToMyCalories() {\n            Principal.identity().then(function (account) {\n                vm.account = account;\n\n                if (vm.account) {\n\n                    // case the user has the role ROLE_ADMIN or ROLE_USERS_MANAGER\n                    // we redirect him to the users manager screen\n                    if (vm.account.authorities.indexOf('ROLE_USER') >= 0) {\n                        $state.go('user-calories', {'username': vm.account.login});\n                    }\n\n                }\n\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .directive('activeMenu', activeMenu);\n\n    activeMenu.$inject = ['$translate', '$locale', 'tmhDynamicLocale'];\n\n    function activeMenu($translate, $locale, tmhDynamicLocale) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var language = attrs.activeMenu;\n\n            scope.$watch(function() {\n                return $translate.use();\n            }, function(selectedLanguage) {\n                if (language === selectedLanguage) {\n                    tmhDynamicLocale.set(language);\n                    element.addClass('active');\n                } else {\n                    element.removeClass('active');\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('error', {\n                parent: 'app',\n                url: '/error',\n                data: {\n                    authorities: [],\n                    pageTitle: 'error.title'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/error.html'\n                    }\n                },\n                resolve: {\n                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {\n                        $translatePartialLoader.addPart('error');\n                        return $translate.refresh();\n                    }]\n                }\n            })\n            .state('accessdenied', {\n                parent: 'app',\n                url: '/accessdenied',\n                data: {\n                    authorities: []\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/accessdenied.html'\n                    }\n                },\n                resolve: {\n                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {\n                        $translatePartialLoader.addPart('error');\n                        return $translate.refresh();\n                    }]\n                }\n            });\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('home', {\n            parent: 'app',\n            url: '/',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/home/home.html',\n                    controller: 'HomeController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        $translatePartialLoader.addPart('home');\n                        $translatePartialLoader.addPart('login');\n                        return $translate.refresh();\n                    }]\n            }\n        });\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .controller('HomeController', HomeController);\n\n    HomeController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];\n\n    function HomeController($scope, Principal, LoginService, $state) {\n        var vm = this;\n\n        vm.account = null;\n        vm.isAuthenticated = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n\n        // this boolean will indivate whether to perform a redirection when calling\n        // getAccount method\n        vm.performRedirection = false;\n\n        $scope.$on('authenticationSuccess', function () {\n            vm.performRedirection = true;\n            getAccount();\n        });\n\n        getAccount();\n\n        function getAccount() {\n            Principal.identity().then(function (account) {\n                vm.account = account;\n                vm.isAuthenticated = Principal.isAuthenticated;\n\n                if (vm.performRedirection && vm.account) {\n\n                    // case the user has the role ROLE_ADMIN or ROLE_USERS_MANAGER\n                    // we redirect him to the users manager screen\n                    if (vm.account.authorities.indexOf('ROLE_ADMIN') >= 0 || vm.account.authorities.indexOf('ROLE_USERS_MANAGER') >= 0) {\n                        $state.go('user-management', null, {reload: true});\n                    }\n                    // else we will redirect him to the calories screen\n                    else {\n                        $state.go('user-calories', {'username': vm.account.login});\n                    }\n\n                }\n\n            });\n        }\n        function register() {\n            $state.go('register');\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('entity', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .filter('words', words);\n\n    function words() {\n        return wordsFilter;\n\n        function wordsFilter(input, words) {\n            if (isNaN(words)) {\n                return input;\n            }\n            if (words <= 0) {\n                return '';\n            }\n            if (input) {\n                var inputWords = input.split(/\\s+/);\n                if (inputWords.length > words) {\n                    input = inputWords.slice(0, words).join(' ') + '...';\n                }\n            }\n            return input;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .filter('characters', characters);\n\n    function characters () {\n        return charactersFilter;\n\n        function charactersFilter(input, chars, breakOnWord) {\n            if (isNaN(chars)) {\n                return input;\n            }\n            if (chars <= 0) {\n                return '';\n            }\n            if (input && input.length > chars) {\n                input = input.substring(0, chars);\n\n                if (!breakOnWord) {\n                    var lastspace = input.lastIndexOf(' ');\n                    // Get last space\n                    if (lastspace !== -1) {\n                        input = input.substr(0, lastspace);\n                    }\n                } else {\n                    while (input.charAt(input.length-1) === ' ') {\n                        input = input.substr(0, input.length - 1);\n                    }\n                }\n                return input + '...';\n            }\n            return input;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .directive('jhSortBy', jhSortBy);\n\n    function jhSortBy() {\n        var directive = {\n            restrict: 'A',\n            scope: false,\n            require: '^jhSort',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs, parentCtrl) {\n            element.bind('click', function () {\n                parentCtrl.sort(attrs.jhSortBy);\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .directive('jhSort', jhSort);\n\n    function jhSort () {\n        var directive = {\n            restrict: 'A',\n            scope: {\n                predicate: '=jhSort',\n                ascending: '=',\n                callback: '&'\n            },\n            controller: SortController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n    }\n\n    SortController.$inject = ['$scope', '$element'];\n\n    function SortController ($scope, $element) {\n        var vm = this;\n\n        vm.applyClass = applyClass;\n        vm.resetClasses = resetClasses;\n        vm.sort = sort;\n        vm.triggerApply = triggerApply;\n\n        $scope.$watchGroup(['vm.predicate', 'vm.ascending'], vm.triggerApply);\n        vm.triggerApply();\n\n        function applyClass (element) {\n            var thisIcon = element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt',\n                remove = sortIcon + ' ' + sortDesc,\n                add = sortAsc;\n            if (!vm.ascending) {\n                remove = sortIcon + ' ' + sortAsc;\n                add = sortDesc;\n            }\n            vm.resetClasses();\n            thisIcon.removeClass(remove);\n            thisIcon.addClass(add);\n        }\n\n        function resetClasses () {\n            var allThIcons = $element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt';\n            allThIcons.removeClass(sortAsc + ' ' + sortDesc);\n            allThIcons.addClass(sortIcon);\n        }\n\n        function sort (field) {\n            if (field !== vm.predicate) {\n                vm.ascending = true;\n            } else {\n                vm.ascending = !vm.ascending;\n            }\n            vm.predicate = field;\n            $scope.$apply();\n            vm.callback();\n        }\n\n        function triggerApply (values)  {\n            vm.resetClasses();\n            if (values && values[0] !== '_score') {\n                vm.applyClass($element.find('th[jh-sort-by=\\'' + values[0] + '\\']'));\n            }\n        }\n    }\n})();\n\n(function(){\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('ParseLinks', ParseLinks);\n\n    function ParseLinks () {\n\n        var service = {\n            parse : parse\n        };\n\n        return service;\n\n        function parse(header) {\n            if (header.length === 0) {\n                throw new Error('input must not be of zero length');\n            }\n\n            // Split parts by comma\n            var parts = header.split(',');\n            var links = {};\n            // Parse each part into a named link\n            angular.forEach(parts, function(p) {\n                var section = p.split('>;');\n                if (section.length !== 2) {\n                    throw new Error('section could not be split on \">;\"');\n                }\n                var url = section[0].replace(/<(.*)/, '$1').trim();\n                var queryString = {};\n                url.replace(\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n                    function($0, $1, $2, $3) { queryString[$1] = $3; }\n                );\n                var page = queryString.page;\n                if (angular.isString(page)) {\n                    page = parseInt(page);\n                }\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n                links[name] = page;\n            });\n            return links;\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .factory('PaginationUtil', PaginationUtil);\n\n    function PaginationUtil() {\n\n        var service = {\n            parseAscending: parseAscending,\n            parsePage: parsePage,\n            parsePredicate: parsePredicate\n        };\n\n        return service;\n\n        function parseAscending(sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1) {\n                return sort.split(',').slice(-1)[0] === 'asc';\n            } else {\n                // default to true if no sort defined\n                return true;\n            }\n        }\n\n        // query params are strings, and need to be parsed\n        function parsePage(page) {\n            if (page) {\n                return parseInt(page);\n            }\n            return null;\n        }\n\n        // sort can be in the format `id,asc` or `id`\n        function parsePredicate(sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1) {\n                sortArray.pop();\n            }\n            return sortArray.join(',');\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    var jhiItemCount = {\n        template: '<div class=\"info\">' +\n                    'Showing {{(($ctrl.page - 1) * $ctrl.itemsPerPage) == 0 ? 1 : (($ctrl.page - 1) * $ctrl.itemsPerPage + 1)}} - ' +\n                    '{{($ctrl.page * $ctrl.itemsPerPage) < $ctrl.queryCount ? ($ctrl.page * $ctrl.itemsPerPage) : $ctrl.queryCount}} ' +\n                    'of {{$ctrl.queryCount}} items.' +\n                '</div>',\n        bindings: {\n            page: '<',\n            queryCount: '<total',\n            itemsPerPage: '<'\n        }\n    };\n\n    angular\n        .module('caloappApp')\n        .component('jhiItemCount', jhiItemCount);\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('DateUtils', DateUtils);\n\n    DateUtils.$inject = ['$filter'];\n\n    function DateUtils ($filter) {\n\n        var service = {\n            convertDateTimeFromServer : convertDateTimeFromServer,\n            convertLocalDateFromServer : convertLocalDateFromServer,\n            convertLocalDateToServer : convertLocalDateToServer,\n            dateformat : dateformat\n        };\n\n        return service;\n\n        function convertDateTimeFromServer (date) {\n            if (date) {\n                return new Date(date);\n            } else {\n                return null;\n            }\n        }\n\n        function convertLocalDateFromServer (date) {\n            if (date) {\n                var dateString = date.split('-');\n                return new Date(dateString[0], dateString[1] - 1, dateString[2]);\n            }\n            return null;\n        }\n\n        function convertLocalDateToServer (date) {\n            if (date) {\n                return $filter('date')(date, 'yyyy-MM-dd');\n            } else {\n                return null;\n            }\n        }\n\n        function dateformat () {\n            return 'yyyy-MM-dd';\n        }\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('DataUtils', DataUtils);\n\n    DataUtils.$inject = ['$window'];\n\n    function DataUtils ($window) {\n\n        var service = {\n            abbreviate: abbreviate,\n            byteSize: byteSize,\n            openFile: openFile,\n            toBase64: toBase64\n        };\n\n        return service;\n\n        function abbreviate (text) {\n            if (!angular.isString(text)) {\n                return '';\n            }\n            if (text.length < 30) {\n                return text;\n            }\n            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';\n        }\n\n        function byteSize (base64String) {\n            if (!angular.isString(base64String)) {\n                return '';\n            }\n\n            function endsWith(suffix, str) {\n                return str.indexOf(suffix, str.length - suffix.length) !== -1;\n            }\n\n            function paddingSize(base64String) {\n                if (endsWith('==', base64String)) {\n                    return 2;\n                }\n                if (endsWith('=', base64String)) {\n                    return 1;\n                }\n                return 0;\n            }\n\n            function size(base64String) {\n                return base64String.length / 4 * 3 - paddingSize(base64String);\n            }\n\n            function formatAsBytes(size) {\n                return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\n            }\n\n            return formatAsBytes(size(base64String));\n        }\n\n        function openFile (type, data) {\n            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');\n        }\n\n        function toBase64 (file, cb) {\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = function (e) {\n                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\n                cb(base64Data);\n            };\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .filter('capitalize', capitalize);\n\n    function capitalize() {\n        return capitalizeFilter;\n\n        function capitalizeFilter (input) {\n            if (input !== null) {\n                input = input.toLowerCase();\n                input = input.substring(0, 1).toUpperCase() + input.substring(1);\n            }\n            return input;\n        }\n    }\n})();\n\n(function() {\n    /*jshint bitwise: false*/\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('Base64', Base64);\n\n    function Base64 () {\n        var keyStr = 'ABCDEFGHIJKLMNOP' +\n            'QRSTUVWXYZabcdef' +\n            'ghijklmnopqrstuv' +\n            'wxyz0123456789+/' +\n            '=';\n\n        var service = {\n            decode : decode,\n            encode : encode\n        };\n\n        return service;\n\n        function encode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            while (i < input.length) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    keyStr.charAt(enc1) +\n                    keyStr.charAt(enc2) +\n                    keyStr.charAt(enc3) +\n                    keyStr.charAt(enc4);\n            }\n\n            return output;\n        }\n\n        function decode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n            while (i < input.length) {\n                enc1 = keyStr.indexOf(input.charAt(i++));\n                enc2 = keyStr.indexOf(input.charAt(i++));\n                enc3 = keyStr.indexOf(input.charAt(i++));\n                enc4 = keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 !== 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 !== 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n            }\n\n            return output;\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .factory('LoginService', LoginService);\n\n    LoginService.$inject = ['$state'];\n\n    function LoginService($state) {\n        var service = {\n            open: open\n        };\n\n        return service;\n\n        function open() {\n            $state.go('home');\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .controller('LoginController', LoginController);\n\n    LoginController.$inject = ['$rootScope', '$state', '$timeout', 'Auth'];\n\n    function LoginController($rootScope, $state, $timeout, Auth) {\n        var vm = this;\n\n        vm.authenticationError = false;\n        vm.cancel = cancel;\n        vm.credentials = {};\n        vm.login = login;\n        vm.password = null;\n        vm.register = register;\n        vm.rememberMe = true;\n        vm.requestResetPassword = requestResetPassword;\n        vm.username = null;\n\n        $timeout(function () {\n            angular.element('#username').focus();\n        });\n\n        function cancel() {\n            vm.credentials = {\n                username: null,\n                password: null,\n                rememberMe: true\n            };\n            vm.authenticationError = false;\n\n        }\n\n        function login(event) {\n            event.preventDefault();\n            Auth.login({\n                username: vm.username,\n                password: vm.password,\n                rememberMe: vm.rememberMe\n            }).then(function () {\n                vm.authenticationError = false;\n\n//                if ($state.current.name === 'register' || $state.current.name === 'activate' ||\n//                        $state.current.name === 'finishReset' || $state.current.name === 'requestReset') {\n//                    $state.go('home');\n//                }\n\n                $rootScope.$broadcast('authenticationSuccess');\n\n                // previousState was set in the authExpiredInterceptor before being redirected to login modal.\n                // since login is successful, go to stored previousState and clear previousState\n//                if (Auth.getPreviousState()) {\n//                    var previousState = Auth.getPreviousState();\n//                    Auth.resetPreviousState();\n//                    $state.go(previousState.name, previousState.params);\n//                }\n            }).catch(function () {\n                vm.authenticationError = true;\n            });\n        }\n\n        function register() {\n            $state.go('register');\n        }\n\n        function requestResetPassword() {\n            $state.go('requestReset');\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('JhiLanguageService', JhiLanguageService);\n\n    JhiLanguageService.$inject = ['$q', '$http', '$translate', 'LANGUAGES'];\n\n    function JhiLanguageService ($q, $http, $translate, LANGUAGES) {\n        var service = {\n            getAll: getAll,\n            getCurrent: getCurrent\n        };\n\n        return service;\n\n        function getAll () {\n            var deferred = $q.defer();\n            deferred.resolve(LANGUAGES);\n            return deferred.promise;\n        }\n\n        function getCurrent () {\n            var deferred = $q.defer();\n            var language = $translate.storage().get('NG_TRANSLATE_LANG_KEY');\n\n            deferred.resolve(language);\n\n            return deferred.promise;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .filter('findLanguageFromKey', findLanguageFromKey);\n\n    function findLanguageFromKey() {\n        return findLanguageFromKeyFilter;\n\n        function findLanguageFromKeyFilter(lang) {\n            return {\n                'ca': 'Català',\n                'cs': 'Český',\n                'da': 'Dansk',\n                'de': 'Deutsch',\n                'el': 'Ελληνικά',\n                'en': 'English',\n                'es': 'Español',\n                'et': 'Eesti',\n                'fr': 'Français',\n                'gl': 'Galego',\n                'hu': 'Magyar',\n                'hi': 'हिंदी',\n                'it': 'Italiano',\n                'ja': '日本語',\n                'ko': '한국어',\n                'mr': 'मराठी',\n                'nl': 'Nederlands',\n                'pl': 'Polski',\n                'pt-br': 'Português (Brasil)',\n                'pt-pt': 'Português',\n                'ro': 'Română',\n                'ru': 'Русский',\n                'sk': 'Slovenský',\n                'sr': 'Srpski',\n                'sv': 'Svenska',\n                'ta': 'தமிழ்',\n                'tr': 'Türkçe',\n                'vi': 'Tiếng Việt',\n                'zh-cn': '中文（简体）',\n                'zh-tw': '繁體中文'\n            }[lang];\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .controller('JhiLanguageController', JhiLanguageController);\n\n    JhiLanguageController.$inject = ['$translate', 'JhiLanguageService', 'tmhDynamicLocale'];\n\n    function JhiLanguageController ($translate, JhiLanguageService, tmhDynamicLocale) {\n        var vm = this;\n\n        vm.changeLanguage = changeLanguage;\n        vm.languages = null;\n\n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n\n        function changeLanguage (languageKey) {\n            $translate.use(languageKey);\n            tmhDynamicLocale.set(languageKey);\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n\n        /*\n         Languages codes are ISO_639-1 codes, see http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n         They are written in English to avoid character encoding issues (not a perfect solution)\n         */\n        .constant('LANGUAGES', [\n            'en'\n            // jhipster-needle-i18n-language-constant - JHipster will add/remove languages in this array\n        ]\n    );\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .directive('showValidation', showValidation);\n\n    function showValidation () {\n        var directive = {\n            restrict: 'A',\n            require: 'form',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, formCtrl) {\n            element.find('.form-group').each(function() {\n                var $formGroup = angular.element(this);\n                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');\n\n                if ($inputs.length > 0) {\n                    $inputs.each(function() {\n                        var $input = angular.element(this);\n                        var inputName = $input.attr('name');\n                        scope.$watch(function() {\n                            return formCtrl[inputName].$invalid && formCtrl[inputName].$dirty;\n                        }, function(isInvalid) {\n                            $formGroup.toggleClass('has-error', isInvalid);\n                        });\n                    });\n                }\n            });\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .constant('paginationConstants', {\n                'itemsPerPage': 10\n            });\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .directive('minbytes', minbytes);\n\n    function minbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.minbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .directive('maxbytes', maxbytes);\n\n    function maxbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.maxbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    var jhiAlertError = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre>{{ alert.msg }}</pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertErrorController\n    };\n\n    angular\n        .module('caloappApp')\n        .component('jhiAlertError', jhiAlertError);\n\n    jhiAlertErrorController.$inject = ['$scope', 'AlertService', '$rootScope', '$translate'];\n\n    function jhiAlertErrorController ($scope, AlertService, $rootScope, $translate) {\n        var vm = this;\n\n        vm.alerts = [];\n\n        function addErrorAlert (message, key, data) {\n            key = key ? key : message;\n            vm.alerts.push(\n                AlertService.add(\n                    {\n                        type: 'danger',\n                        msg: key,\n                        params: data,\n                        timeout: 5000,\n                        toast: AlertService.isToast(),\n                        scoped: true\n                    },\n                    vm.alerts\n                )\n            );\n        }\n\n        var cleanHttpErrorListener = $rootScope.$on('caloappApp.httpError', function (event, httpResponse) {\n            var i;\n            event.stopPropagation();\n            switch (httpResponse.status) {\n            // connection refused, server not reachable\n            case 0:\n                addErrorAlert('Server not reachable','error.server.not.reachable');\n                break;\n\n            case 400:\n                var headers = Object.keys(httpResponse.headers()).filter(function (header) {\n                    return header.indexOf('app-error', header.length - 'app-error'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\n                }).sort();\n                var errorHeader = httpResponse.headers(headers[0]);\n                var entityKey = httpResponse.headers(headers[1]);\n                if (errorHeader) {\n                    var entityName = $translate.instant('global.menu.entities.' + entityKey);\n                    addErrorAlert(errorHeader, errorHeader, {entityName: entityName});\n                } else if (httpResponse.data && httpResponse.data.fieldErrors) {\n                    for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\n                        var fieldError = httpResponse.data.fieldErrors[i];\n                        // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                        var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                        var fieldName = $translate.instant('caloappApp.' + fieldError.objectName + '.' + convertedField);\n                        addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});\n                    }\n                } else if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\n                } else {\n                    addErrorAlert(httpResponse.data);\n                }\n                break;\n\n            case 404:\n                addErrorAlert('Not found','error.url.not.found');\n                break;\n\n            default:\n                if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message);\n                } else {\n                    addErrorAlert(angular.toJson(httpResponse));\n                }\n            }\n        });\n\n        $scope.$on('$destroy', function () {\n            if(angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null){\n                cleanHttpErrorListener();\n                vm.alerts = [];\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .provider('AlertService', AlertService);\n\n    function AlertService () {\n        this.toast = false;\n        /*jshint validthis: true */\n        this.$get = getService;\n\n        this.showAsToast = function(isToast) {\n            this.toast = isToast;\n        };\n\n        getService.$inject = ['$timeout', '$sce', '$translate'];\n\n        function getService ($timeout, $sce,$translate) {\n            var toast = this.toast,\n                alertId = 0, // unique id for each alert. Starts from 0.\n                alerts = [],\n                timeout = 5000; // default timeout\n\n            return {\n                factory: factory,\n                isToast: isToast,\n                add: addAlert,\n                closeAlert: closeAlert,\n                closeAlertByIndex: closeAlertByIndex,\n                clear: clear,\n                get: get,\n                success: success,\n                error: error,\n                info: info,\n                warning : warning\n            };\n\n            function isToast() {\n                return toast;\n            }\n\n            function clear() {\n                alerts = [];\n            }\n\n            function get() {\n                return alerts;\n            }\n\n            function success(msg, params, position) {\n                return this.add({\n                    type: 'success',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function error(msg, params, position) {\n                return this.add({\n                    type: 'danger',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function warning(msg, params, position) {\n                return this.add({\n                    type: 'warning',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function info(msg, params, position) {\n                return this.add({\n                    type: 'info',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function factory(alertOptions) {\n                var alert = {\n                    type: alertOptions.type,\n                    msg: $sce.trustAsHtml(alertOptions.msg),\n                    id: alertOptions.alertId,\n                    timeout: alertOptions.timeout,\n                    toast: alertOptions.toast,\n                    position: alertOptions.position ? alertOptions.position : 'top right',\n                    scoped: alertOptions.scoped,\n                    close: function (alerts) {\n                        return closeAlert(this.id, alerts);\n                    }\n                };\n                if(!alert.scoped) {\n                    alerts.push(alert);\n                }\n                return alert;\n            }\n\n            function addAlert(alertOptions, extAlerts) {\n                alertOptions.alertId = alertId++;\n                alertOptions.msg = $translate.instant(alertOptions.msg, alertOptions.params);\n                var that = this;\n                var alert = this.factory(alertOptions);\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\n                    $timeout(function () {\n                        that.closeAlert(alertOptions.alertId, extAlerts);\n                    }, alertOptions.timeout);\n                }\n                return alert;\n            }\n\n            function closeAlert(id, extAlerts) {\n                var thisAlerts = extAlerts ? extAlerts : alerts;\n                return closeAlertByIndex(thisAlerts.map(function(e) { return e.id; }).indexOf(id), thisAlerts);\n            }\n\n            function closeAlertByIndex(index, thisAlerts) {\n                return thisAlerts.splice(index, 1);\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    var jhiAlert = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre ng-bind-html=\"alert.msg\"></pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertController\n    };\n\n    angular\n        .module('caloappApp')\n        .component('jhiAlert', jhiAlert);\n\n    jhiAlertController.$inject = ['$scope', 'AlertService'];\n\n    function jhiAlertController($scope, AlertService) {\n        var vm = this;\n\n        vm.alerts = AlertService.get();\n        $scope.$on('$destroy', function () {\n            vm.alerts = [];\n        });\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .factory('CaloriesModalService', CaloriesModalService);\n\n    CaloriesModalService.$inject = ['$uibModal', '$state'];\n\n    function CaloriesModalService($uibModal, $state) {\n        var service = {\n            open: open\n        };\n\n        var modalInstance = null;\n        var resetModal = function () {\n            modalInstance = null;\n            $state.go('user-calories', null, {reload: true});\n        };\n\n        var resetModalOnClose = function () {\n            modalInstance = null;\n        };\n\n        return service;\n\n        function open(aMealInformation) {\n\n            if (modalInstance !== null)\n                return;\n            modalInstance = $uibModal.open({\n                animation: true,\n                templateUrl: 'app/calories/modal/calories.modal.html',\n                controller: 'CaloriesModalController',\n                controllerAs: 'vm',\n                backdrop: 'static',\n                resolve: {\n                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                            $translatePartialLoader.addPart('calories');\n                            return $translate.refresh();\n                        }],\n                    mealInformation: function () {\n                        return aMealInformation;\n                    }\n                }\n            });\n\n            modalInstance.result.then(\n                    resetModal,\n                    resetModalOnClose\n                    );\n        }\n    }\n})();\n\n\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .controller('CaloriesModalController', CaloriesModalController);\n\n    CaloriesModalController.$inject = ['$rootScope', '$state', '$timeout', '$uibModalInstance',\n        'mealInformation', '$stateParams', 'CaloriesService'];\n\n    function CaloriesModalController($rootScope, $state, $timeout, $uibModalInstance,\n            mealInformation, $stateParams, CaloriesService) {\n        var vm = this;\n\n        vm.userLogin = $stateParams.username;\n\n\n        // boolean informing whether the saving action is performing\n        vm.isSaving = false;\n\n        vm.editionOrCreationError = false;\n        vm.cancel = cancel;\n        vm.credentials = {\n            id: null,\n            calories: null,\n            description: null,\n            date: null,\n            time: null\n        };\n\n        $timeout(function () {\n            angular.element('#meal').focus();\n        });\n\n        // this method transforms a time represented in ms to a valid date\n        vm.getTime = getTime;\n\n        // this method is called to init the page\n        vm.init = init;\n\n        // this method is called to save the new/updated meal information\n        vm.save = save;\n\n        vm.init();\n\n        function init() {\n            // case we are updating a meal information\n            if (mealInformation) {\n                vm.credentials = {\n                    id: mealInformation.id,\n                    calories: mealInformation.calories,\n                    description: mealInformation.description,\n                    date: mealInformation.date ? new Date(mealInformation.date) : null,\n                    time: mealInformation.time ? vm.getTime(mealInformation.time) : null\n                };\n            }\n\n        }\n\n        function getTime(aTimeInMs) {\n            // get the number of hours\n            var lNbHours = parseInt(aTimeInMs / (3600 * 60));\n            var lNbMinutes = parseInt((aTimeInMs % (3600 * 60)) / 3600);\n\n            // the date to return\n            var lDate = new Date();\n            lDate.setHours(lNbHours);\n            lDate.setMinutes(lNbMinutes);\n            lDate.setSeconds(0);\n            lDate.setMilliseconds(0);\n\n            return lDate;\n        }\n\n        function save(event) {\n\n            // method called when the update/creation is successful\n            function onSaveSuccess(result) {\n                vm.isSaving = false;\n                $uibModalInstance.close(result);\n            }\n\n            // method called when the update/creation failed\n            function onSaveFailure() {\n                vm.isSaving = false;\n                vm.editionOrCreationError = true;\n            }\n\n            vm.editionOrCreationError = false;\n            event.preventDefault();\n            if (!vm.isSaving) {\n\n                vm.isSaving = true;\n\n                var credentialsToSend = {\n                    id: vm.credentials.id,\n                    userLogin: vm.userLogin,\n                    description: vm.credentials.description,\n                    calories: vm.credentials.calories\n                };\n\n                // we process the date to get the number of ms\n                var lDate = new Date(vm.credentials.date);\n                // we put the date 01:00 to be able to filter them quickly later\n                lDate.setHours(1);\n                lDate.setMinutes(0);\n\n                credentialsToSend.date = Number(lDate.getTime());\n\n                // we process the time to get the number of ms\n                var lTime = new Date(vm.credentials.time);\n                var lNbHours = lTime.getHours();\n                var lNbMinutes = lTime.getMinutes();\n\n                credentialsToSend.time = Number(((lNbHours * 60) + lNbMinutes) * 3600);\n\n                // depending on whether it is a creation or an update we will call a different WS\n                // case it is an update the id is inquired\n                if (vm.credentials.id) {\n                    CaloriesService.update(credentialsToSend, onSaveSuccess, onSaveFailure);\n                }\n                // case the user creates a new meal information\n                else {\n                    CaloriesService.save(credentialsToSend, onSaveSuccess, onSaveFailure);\n                }\n\n            }\n\n\n\n        }\n\n\n\n        function cancel() {\n            vm.credentials = {\n                id: null,\n                calories: null,\n                description: null,\n                date: null,\n                time: null\n            };\n            vm.editionOrCreationError = false;\n            $uibModalInstance.dismiss('cancel');\n        }\n\n\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .controller('UserCaloriesDeleteController', UserCaloriesDeleteController);\n\n    UserCaloriesDeleteController.$inject = ['$uibModalInstance', 'CaloriesService', '$stateParams'];\n\n    function UserCaloriesDeleteController($uibModalInstance, CaloriesService, $stateParams) {\n        var vm = this;\n\n        vm.mealInformationId = $stateParams.idMealInfo;\n\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear() {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete(mealInformationId) {\n            CaloriesService.delete({idMealInformation: mealInformationId},\n                    function () {\n                        $uibModalInstance.close(true);\n                    });\n        }\n    }\n})();\n\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .config(caloriesConfig);\n\n    caloriesConfig.$inject = ['$stateProvider'];\n\n    function caloriesConfig($stateProvider) {\n        $stateProvider\n                .state('user-calories', {\n                    parent: 'app',\n                    url: '/user-calories/:username?page',\n                    data: {\n                        authorities: ['ROLE_USER', 'ROLE_ADMIN'],\n                        pageTitle: 'calories.title'\n                    },\n                    views: {\n                        'content@': {\n                            templateUrl: 'app/calories/calories.html',\n                            controller: 'CaloriesController',\n                            controllerAs: 'vm'\n                        }\n                    },\n                    params: {\n                        page: {\n                            value: '1',\n                            squash: true\n                        },\n                        fromDate: {\n                            value: null,\n                            squash: true\n                        },\n                        toDate: {\n                            value: null,\n                            squash: true\n                        },\n                        fromTime: {\n                            value: null,\n                            squash: true\n                        },\n                        toTime: {\n                            value: null,\n                            squash: true\n                        }\n                    },\n                    resolve: {\n                        pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n\n                                var lSortParam = \"date,desc\";\n                                return {\n                                    page: PaginationUtil.parsePage($stateParams.page),\n                                    sort: lSortParam,\n                                    predicate: PaginationUtil.parsePredicate(lSortParam),\n                                    ascending: PaginationUtil.parseAscending(lSortParam),\n                                    fromDate: PaginationUtil.parsePage($stateParams.fromDate),\n                                    toDate: PaginationUtil.parsePage($stateParams.toDate),\n                                    fromTime: PaginationUtil.parsePage($stateParams.fromTime),\n                                    toTime: PaginationUtil.parsePage($stateParams.toTime)\n                                };\n                            }],\n                        mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                                $translatePartialLoader.addPart('calories');\n                                return $translate.refresh();\n                            }]\n                    }\n                })\n                .state('user-calories.delete', {\n                    parent: 'user-calories',\n                    url: '/{idMealInfo}/delete',\n                    data: {\n                        authorities: ['ROLE_USER', 'ROLE_ADMIN'],\n                    },\n                    onEnter: ['$stateParams', '$state', '$uibModal', function ($stateParams, $state, $uibModal) {\n                            $uibModal.open({\n                                templateUrl: 'app/calories/delete/user-calories-delete-dialog.html',\n                                controller: 'UserCaloriesDeleteController',\n                                controllerAs: 'vm',\n                                size: 'md'\n                            }).result.then(function () {\n                                $state.go('user-calories', null, {reload: true});\n                            }, function () {\n                                $state.go('^');\n                            });\n                        }]\n                });\n    }\n})();\n\n\n(function () {\n    'use strict';\n    angular\n            .module('caloappApp')\n            .factory('CaloriesService', CaloriesService);\n    CaloriesService.$inject = ['$resource'];\n    function CaloriesService($resource) {\n\n\n        var service = $resource('api/meal-information/:idMealInformation', {}, {\n            'query': {\n                method: 'GET',\n                isArray: true,\n                params: {\n                    userLogin: null,\n                    fromDate: null,\n                    toDate: null,\n                    fromTime: null,\n                    toTime: null\n                }\n            },\n            'save': {method: 'POST'},\n            'update': {method: 'PUT'},\n            'delete': {method: 'DELETE'}\n        });\n        return service;\n    }\n}\n)();\n\n\n(function () {\n    'use strict';\n    angular\n            .module('caloappApp')\n            .controller('CaloriesController', CaloriesController);\n    CaloriesController.$inject = ['$scope', 'CaloriesModalService', 'paginationConstants', 'pagingParams',\n        'AlertService', 'ParseLinks', 'CaloriesService', '$stateParams', '$state', 'Principal', 'User',\n        '$filter'];\n    function CaloriesController($scope, CaloriesModalService, paginationConstants, pagingParams,\n            AlertService, ParseLinks, CaloriesService, $stateParams, $state, Principal, User,\n            $filter) {\n        var vm = this;\n        vm.userLogin = $stateParams.username;\n\n        // the number of calories/day specified by the user\n        vm.dailyCaloriesLimit = null;\n\n        // the error message to display when something goes wrong with the filter\n        vm.filterErrorMessageToDisplay = null;\n\n        // boolean indicating whether the list of meals information is loading\n        vm.isListMealsInformationLoading = false;\n\n        // this method is called to init the page\n        vm.init = init;\n\n        // list of keys to get the different meals information by date.\n        // Each element contain the number of meals information having the same date and the\n        // index, within the list vm.mealInformationsSimpleList, of the first element having that date\n        vm.listInformationByDate = [];\n\n        // simple list of meals information\n        vm.mealInformationsSimpleList = [];\n\n        // this list will contain for each day the total calories added by the user\n        vm.listCaloriesPerDay = [];\n\n        // this method clears the filter and reload the page without filters\n        vm.clearFilter = clearFilter;\n\n        // pagination information\n        vm.page = 1;\n        vm.totalItems = null;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.links = null;\n        vm.transition = transition;\n\n        // this method is called to loead meals information matching a specific page\n        // => when the user changes a page\n        vm.loadPage = loadPage;\n        // this method reload the current page\n        vm.loadAll = loadAll;\n        // this method opens the meal modal whether for creation or edition\n        vm.openMealModal = CaloriesModalService.open;\n\n        // given the date in the parameter this method checks whether the user has exceeded the calories\n        // limit or not. It returns true if the limit is exceeded\n        vm.checkLimit = checkLimit;\n\n        // method called to edit a meal information line\n        vm.editMealInformation = editMealInformation;\n\n        // this method is called to filter calories by date and time\n        vm.loadMealsInformationByFilter = loadMealsInformationByFilter;\n\n        // this boolean indicates whether the filter is processing or not\n        vm.isFilterProcessing = false;\n\n        // this method transforms a time represented in ms to a valid date\n        vm.getTime = getTime;\n\n        // the filter information that will be used by the filter query\n        vm.filterInformationForQuery = {\n            beginDate: pagingParams.fromDate,\n            endDate: pagingParams.toDate,\n            beginTime: pagingParams.fromTime,\n            endTime: pagingParams.toTime\n        };\n\n        // the filter information that would be manipulated within the screen\n        vm.filterInformationForScreen = {\n            beginDate: pagingParams.fromDate ? new Date(pagingParams.fromDate) : null,\n            endDate: pagingParams.toDate ? new Date(pagingParams.toDate) : null,\n            beginTime: pagingParams.fromTime ? vm.getTime(pagingParams.fromTime) : null,\n            endTime: pagingParams.toTime ? vm.getTime(pagingParams.toTime) : null\n        };\n\n        function getTime(aTimeInMs) {\n            // get the number of hours\n            var lNbHours = parseInt(aTimeInMs / (3600 * 60));\n            var lNbMinutes = parseInt((aTimeInMs % (3600 * 60)) / 3600);\n\n            // the date to return\n            var lDate = new Date();\n            lDate.setHours(lNbHours);\n            lDate.setMinutes(lNbMinutes);\n            lDate.setSeconds(0);\n            lDate.setMilliseconds(0);\n\n            return lDate;\n        }\n\n\n\n        vm.init();\n\n        function init() {\n\n            // decide whether the user is displaying his own information or if it is an administrator\n            // who is doing it\n            Principal.identity().then(function (account) {\n\n                vm.isSameUser = (account.login === vm.userLogin);\n\n            });\n\n            // get the displayed user's daily calories limit\n            User.get(\n                    {login: vm.userLogin},\n                    function (result) {\n                        vm.dailyCaloriesLimit = result.calories;\n                    });\n        }\n\n        function editMealInformation(aMealInformation) {\n            vm.openMealModal(aMealInformation);\n        }\n\n\n        // we load the meals on page initialization\n        vm.loadAll();\n\n\n        function loadAll() {\n\n            vm.isListMealsInformationLoading = true;\n\n            CaloriesService.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort(),\n                userLogin: vm.userLogin,\n                fromDate: vm.filterInformationForQuery.beginDate ? vm.filterInformationForQuery.beginDate : null,\n                toDate: vm.filterInformationForQuery.endDate ? vm.filterInformationForQuery.endDate : null,\n                fromTime: vm.filterInformationForQuery.beginTime ? vm.filterInformationForQuery.beginTime : null,\n                toTime: vm.filterInformationForQuery.endTime ? vm.filterInformationForQuery.endTime : null\n            }, onSuccess, onError);\n        }\n\n        function clearFilter() {\n            // we perform this action only if the user hasn't already initiated a loading action\n            if (!vm.isListMealsInformationLoading) {\n                vm.page = 1;\n\n                $state.transitionTo($state.$current, {\n                    page: vm.page,\n                    sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                    username: vm.userLogin,\n                    fromDate: null,\n                    toDate: null,\n                    fromTime: null,\n                    toTime: null\n                });\n            }\n\n        }\n\n        function loadMealsInformationByFilter() {\n\n            vm.filterErrorMessageToDisplay = null;\n\n\n            if (!vm.isFilterProcessing) {\n                vm.isFilterProcessing = true;\n\n                // we transform the different dates and times into ms\n\n                // Begin date\n                var lBeginDate = new Date(vm.filterInformationForScreen.beginDate);\n                lBeginDate.setHours(0);\n                lBeginDate.setMinutes(0);\n\n                lBeginDate = lBeginDate.getTime();\n\n                // End date\n                var lEndDate = new Date(vm.filterInformationForScreen.endDate);\n                lEndDate.setHours(23);\n                lEndDate.setMinutes(59);\n\n                lEndDate = lEndDate.getTime();\n\n                // Begin time\n                var lBeginTime = new Date(vm.filterInformationForScreen.beginTime);\n                var lNbHours = lBeginTime.getHours();\n                var lNbMinutes = lBeginTime.getMinutes();\n\n                lBeginTime = (((lNbHours * 60) + lNbMinutes) * 3600) - 10;\n\n                // End time\n                var lEndTime = new Date(vm.filterInformationForScreen.endTime);\n                lNbHours = lEndTime.getHours();\n                lNbMinutes = lEndTime.getMinutes();\n\n                lEndTime = (((lNbHours * 60) + lNbMinutes) * 3600) + 10;\n\n                if ((lBeginDate >= lEndDate) || (lEndTime <= lBeginTime)) {\n                    vm.filterErrorMessageToDisplay = $filter('translate')('calories.filter.errorMessage');\n                    vm.isFilterProcessing = false;\n                    return;\n                }\n\n                vm.page = 1;\n\n                $state.transitionTo($state.$current, {\n                    page: vm.page,\n                    sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                    username: vm.userLogin,\n                    fromDate: Number(lBeginDate),\n                    toDate: Number(lEndDate),\n                    fromTime: Number(lBeginTime),\n                    toTime: Number(lEndTime)\n                });\n            }\n        }\n\n        function checkLimit(aDate) {\n            if (vm.listCaloriesPerDay[aDate]) {\n                return (vm.listCaloriesPerDay[aDate] > vm.dailyCaloriesLimit);\n            }\n            return false;\n        }\n\n        function onSuccess(data, headers) {\n\n            vm.isFilterProcessing = false;\n\n            for (var i in data) {\n\n                if (data[i].userLogin) {\n\n                    var lMealInformation = data[i];\n\n                    //get the number of hours\n                    var lNbHours = parseInt(lMealInformation.time / (3600 * 60)) + '';\n\n                    if (lNbHours.length === 1) {\n                        lNbHours = '0' + lNbHours;\n                    }\n                    var lNbMinutes = parseInt((lMealInformation.time % (3600 * 60)) / 3600) + '';\n\n                    if (lNbMinutes.length === 1) {\n                        lNbMinutes = '0' + lNbMinutes;\n                    }\n\n                    lMealInformation.timeToDisplay = lNbHours + ':' + lNbMinutes;\n\n                    if (vm.listInformationByDate[lMealInformation.date]) {\n                        vm.listInformationByDate[lMealInformation.date].nbElts++;\n                    } else {\n                        var lInformationByDate = {\n                            nbElts: 1,\n                            index: i\n                        };\n                        vm.listInformationByDate[lMealInformation.date] = lInformationByDate;\n                    }\n\n\n\n                    if (vm.listCaloriesPerDay[lMealInformation.date]) {\n                        vm.listCaloriesPerDay[lMealInformation.date] += lMealInformation.calories;\n                    } else {\n                        vm.listCaloriesPerDay[lMealInformation.date] = lMealInformation.calories;\n                    }\n\n                    vm.mealInformationsSimpleList.push(lMealInformation);\n\n                }\n            }\n\n            vm.links = ParseLinks.parse(headers('link'));\n            vm.totalItems = headers('X-Total-Count');\n            vm.queryCount = vm.totalItems;\n            vm.page = pagingParams.page;\n\n            vm.isListMealsInformationLoading = false;\n\n        }\n\n        function onError(error) {\n            vm.isListMealsInformationLoading = false;\n            vm.isFilterProcessing = false;\n            AlertService.error(error.data.message);\n        }\n\n        function sort() {\n            var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n            if (vm.predicate !== 'id') {\n                result.push('id');\n            }\n            return result;\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                username: vm.userLogin,\n                fromDate: vm.filterInformationForQuery.beginDate ? vm.filterInformationForQuery.beginDate : null,\n                toDate: vm.filterInformationForQuery.endDate ? vm.filterInformationForQuery.endDate : null,\n                fromTime: vm.filterInformationForQuery.beginTime ? vm.filterInformationForQuery.beginTime : null,\n                toTime: vm.filterInformationForQuery.endTime ? vm.filterInformationForQuery.endTime : null\n            });\n        }\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('notificationInterceptor', notificationInterceptor);\n\n    notificationInterceptor.$inject = ['$q', 'AlertService'];\n\n    function notificationInterceptor ($q, AlertService) {\n        var service = {\n            response: response\n        };\n\n        return service;\n\n        function response (response) {\n            var headers = Object.keys(response.headers()).filter(function (header) {\n                return header.indexOf('app-alert', header.length - 'app-alert'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\n            }).sort();\n            var alertKey = response.headers(headers[0]);\n            if (angular.isString(alertKey)) {\n                AlertService.success(alertKey, { param : response.headers(headers[1])});\n            }\n            return response;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('errorHandlerInterceptor', errorHandlerInterceptor);\n\n    errorHandlerInterceptor.$inject = ['$q', '$rootScope'];\n\n    function errorHandlerInterceptor ($q, $rootScope) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError (response) {\n            if (!(response.status === 401 && (response.data === '' || (response.data.path && response.data.path.indexOf('/api/account') === 0 )))) {\n                $rootScope.$emit('caloappApp.httpError', response);\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('authExpiredInterceptor', authExpiredInterceptor);\n\n    authExpiredInterceptor.$inject = ['$rootScope', '$q', '$injector'];\n\n    function authExpiredInterceptor($rootScope, $q, $injector) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError(response) {\n            // If we have an unauthorized request we redirect to the login page\n            // Don't do this check on the account API to avoid infinite loop\n            if (response.status === 401 && angular.isDefined(response.data.path) && response.data.path.indexOf('/api/account') === -1) {\n                var Auth = $injector.get('Auth');\n                var to = $rootScope.toState;\n                var params = $rootScope.toStateParams;\n                Auth.logout();\n                if (to.name !== 'accessdenied') {\n                    Auth.storePreviousState(to.name, params);\n                }\n                var LoginService = $injector.get('LoginService');\n                LoginService.open();\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('translationHandler', translationHandler);\n\n    translationHandler.$inject = ['$rootScope', '$window', '$state', '$translate'];\n\n    function translationHandler($rootScope, $window, $state, $translate) {\n        return {\n            initialize: initialize,\n            updateTitle: updateTitle\n        };\n\n        function initialize() {\n            // if the current translation changes, update the window title\n            var translateChangeSuccess = $rootScope.$on('$translateChangeSuccess', function() {\n                updateTitle();\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(translateChangeSuccess) && translateChangeSuccess !== null){\n                    translateChangeSuccess();\n                }\n            });\n        }\n\n        // update the window title using params in the following\n        // precedence\n        // 1. titleKey parameter\n        // 2. $state.$current.data.pageTitle (current state page title)\n        // 3. 'global.title'\n        function updateTitle(titleKey) {\n            if (!titleKey && $state.$current.data && $state.$current.data.pageTitle) {\n                titleKey = $state.$current.data.pageTitle;\n            }\n            $translate(titleKey || 'global.title').then(function (title) {\n                $window.document.title = title;\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('stateHandler', stateHandler);\n\n    stateHandler.$inject = ['$rootScope', '$state', '$sessionStorage', '$translate', 'JhiLanguageService', 'translationHandler', '$window',\n        'Auth', 'Principal', 'VERSION'];\n\n    function stateHandler($rootScope, $state, $sessionStorage, $translate, JhiLanguageService, translationHandler, $window,\n        Auth, Principal, VERSION) {\n        return {\n            initialize: initialize\n        };\n\n        function initialize() {\n            $rootScope.VERSION = VERSION;\n\n            var stateChangeStart = $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams, fromState) {\n                $rootScope.toState = toState;\n                $rootScope.toStateParams = toStateParams;\n                $rootScope.fromState = fromState;\n\n                // Redirect to a state with an external URL (http://stackoverflow.com/a/30221248/1098564)\n                if (toState.external) {\n                    event.preventDefault();\n                    $window.open(toState.url, '_self');\n                }\n\n                if (Principal.isIdentityResolved()) {\n                    Auth.authorize();\n                }\n\n                // Update the language\n                JhiLanguageService.getCurrent().then(function (language) {\n                    $translate.use(language);\n                });\n            });\n\n            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess',  function(event, toState, toParams, fromState, fromParams) {\n                var titleKey = 'global.title' ;\n\n                // Set the page title key to the one configured in state or use default one\n                if (toState.data.pageTitle) {\n                    titleKey = toState.data.pageTitle;\n                }\n                translationHandler.updateTitle(titleKey);\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\n                    stateChangeStart();\n                }\n                if(angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null){\n                    stateChangeSuccess();\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(paginationConfig);\n\n    paginationConfig.$inject = ['uibPaginationConfig', 'paginationConstants'];\n\n    function paginationConfig(uibPaginationConfig, paginationConstants) {\n        uibPaginationConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPaginationConfig.maxSize = 5;\n        uibPaginationConfig.boundaryLinks = true;\n        uibPaginationConfig.firstText = '«';\n        uibPaginationConfig.previousText = '‹';\n        uibPaginationConfig.nextText = '›';\n        uibPaginationConfig.lastText = '»';\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(pagerConfig);\n\n    pagerConfig.$inject = ['uibPagerConfig', 'paginationConstants'];\n\n    function pagerConfig(uibPagerConfig, paginationConstants) {\n        uibPagerConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPagerConfig.previousText = '«';\n        uibPagerConfig.nextText = '»';\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .factory('translationStorageProvider', translationStorageProvider);\n\n    translationStorageProvider.$inject = ['$cookies', '$log', 'LANGUAGES'];\n\n    function translationStorageProvider($cookies, $log, LANGUAGES) {\n        return {\n            get: get,\n            put: put\n        };\n\n        function get(name) {\n            if (LANGUAGES.indexOf($cookies.getObject(name)) === -1) {\n                $log.info('Resetting invalid cookie language \"' + $cookies.getObject(name) + '\" to preferred language \"en\"');\n                $cookies.putObject(name, 'en');\n            }\n            return $cookies.getObject(name);\n        }\n\n        function put(name, value) {\n            $cookies.putObject(name, value);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(translationConfig);\n\n    translationConfig.$inject = ['$translateProvider', 'tmhDynamicLocaleProvider'];\n\n    function translationConfig($translateProvider, tmhDynamicLocaleProvider) {\n        // Initialize angular-translate\n        $translateProvider.useLoader('$translatePartialLoader', {\n            urlTemplate: 'i18n/{lang}/{part}.json'\n        });\n\n        $translateProvider.preferredLanguage('en');\n        $translateProvider.useStorage('translationStorageProvider');\n        $translateProvider.useSanitizeValueStrategy('escaped');\n        $translateProvider.addInterpolation('$translateMessageFormatInterpolation');\n\n        tmhDynamicLocaleProvider.localeLocationPattern('i18n/angular-locale_{{locale}}.js');\n        tmhDynamicLocaleProvider.useCookieStorage();\n        tmhDynamicLocaleProvider.storageKey('NG_TRANSLATE_LANG_KEY');\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(localStorageConfig);\n\n    localStorageConfig.$inject = ['$localStorageProvider', '$sessionStorageProvider'];\n\n    function localStorageConfig($localStorageProvider, $sessionStorageProvider) {\n        $localStorageProvider.setKeyPrefix('jhi-');\n        $sessionStorageProvider.setKeyPrefix('jhi-');\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(httpConfig);\n\n    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', 'httpRequestInterceptorCacheBusterProvider', '$urlMatcherFactoryProvider'];\n\n    function httpConfig($urlRouterProvider, $httpProvider, httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\n        //Cache everything except rest api requests\n        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\n\n        $urlRouterProvider.otherwise('/');\n\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\n        $httpProvider.interceptors.push('authExpiredInterceptor');\n        $httpProvider.interceptors.push('notificationInterceptor');\n        // jhipster-needle-angularjs-add-interceptor JHipster will add new application http interceptor here\n\n        $urlMatcherFactoryProvider.type('boolean', {\n            name : 'boolean',\n            decode: function(val) { return val === true || val === 'true'; },\n            encode: function(val) { return val ? 1 : 0; },\n            equals: function(a, b) { return this.is(a) && a === b; },\n            is: function(val) { return [true,false,0,1].indexOf(val) >= 0; },\n            pattern: /bool|true|0|1/\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(compileServiceConfig);\n\n    compileServiceConfig.$inject = ['$compileProvider','DEBUG_INFO_ENABLED'];\n\n    function compileServiceConfig($compileProvider,DEBUG_INFO_ENABLED) {\n        // disable debug data on prod profile to improve performance\n        $compileProvider.debugInfoEnabled(DEBUG_INFO_ENABLED);\n\n        /*\n        If you wish to debug an application with this information\n        then you should open up a debug console in the browser\n        then call this method directly in this console:\n\n\t\tangular.reloadWithDebugInfo();\n\t\t*/\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .config(bootstrapMaterialDesignConfig);\n\n    bootstrapMaterialDesignConfig.$inject = [];\n\n    function bootstrapMaterialDesignConfig() {\n        $.material.init();\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(alertServiceConfig);\n\n    alertServiceConfig.$inject = ['AlertServiceProvider'];\n\n    function alertServiceConfig(AlertServiceProvider) {\n        // set below to true to make alerts look like toast\n        AlertServiceProvider.showAsToast(false);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('app', {\n            abstract: true,\n            views: {\n                'navbar@': {\n                    templateUrl: 'app/layouts/navbar/navbar.html',\n                    controller: 'NavbarController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                authorize: ['Auth',\n                    function (Auth) {\n                        return Auth.authorize();\n                    }\n                ],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('global');\n                }]\n            }\n        });\n    }\n})();\n\n(function () {\n    'use strict';\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('caloappApp')\n        .constant('VERSION', \"0.0.1\")\n        .constant('DEBUG_INFO_ENABLED', false)\n;\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .controller('UserManagementDialogController', UserManagementDialogController);\n\n    UserManagementDialogController.$inject = ['$stateParams', '$uibModalInstance', 'entity', 'User', 'JhiLanguageService',\n        '$window', 'Principal', '$rootScope'];\n\n    function UserManagementDialogController($stateParams, $uibModalInstance, entity, User, JhiLanguageService,\n            $window, Principal, $rootScope) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN', 'ROLE_USERS_MANAGER'];\n        vm.clear = clear;\n        vm.languages = null;\n        vm.save = save;\n        vm.user = entity;\n\n\n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n\n        function clear() {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function onSaveSuccess(result) {\n            vm.isSaving = false;\n            $uibModalInstance.close(result);\n\n            Principal.identity().then(function (account) {\n                if (account.login === result.login) {\n\n                    Principal.authenticate(result);\n                    $rootScope.$broadcast('update-authorities');\n\n                }\n            });\n\n        }\n\n        function onSaveError() {\n            vm.isSaving = false;\n        }\n\n        function save() {\n            vm.isSaving = true;\n            if (vm.user.id !== null) {\n                User.update(vm.user, onSaveSuccess, onSaveError);\n            } else {\n                User.save(vm.user, onSaveSuccess, onSaveError);\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .controller('UserManagementDetailController', UserManagementDetailController);\n\n    UserManagementDetailController.$inject = ['$stateParams', 'User'];\n\n    function UserManagementDetailController ($stateParams, User) {\n        var vm = this;\n\n        vm.load = load;\n        vm.user = {};\n\n        vm.load($stateParams.login);\n\n        function load (login) {\n            User.get({login: login}, function(result) {\n                vm.user = result;\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .controller('UserManagementDeleteController', UserManagementDeleteController);\n\n    UserManagementDeleteController.$inject = ['$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDeleteController ($uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.user = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (login) {\n            User.delete({login: login},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n                .state('user-management', {\n                    parent: 'admin',\n                    url: '/user-management?page&sort',\n                    data: {\n                        authorities: ['ROLE_ADMIN', 'ROLE_USERS_MANAGER'],\n                        pageTitle: 'userManagement.home.title'\n                    },\n                    views: {\n                        'content@': {\n                            templateUrl: 'app/admin/user-management/user-management.html',\n                            controller: 'UserManagementController',\n                            controllerAs: 'vm'\n                        }\n                    }, params: {\n                        page: {\n                            value: '1',\n                            squash: true\n                        },\n                        sort: {\n                            value: 'id,asc',\n                            squash: true\n                        }\n                    },\n                    resolve: {\n                        pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                                return {\n                                    page: PaginationUtil.parsePage($stateParams.page),\n                                    sort: $stateParams.sort,\n                                    predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                                    ascending: PaginationUtil.parseAscending($stateParams.sort)\n                                };\n                            }],\n                        translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                                $translatePartialLoader.addPart('user-management');\n                                return $translate.refresh();\n                            }]\n\n                    }})\n                .state('user-management-detail', {\n                    parent: 'admin',\n                    url: '/user/:login',\n                    data: {\n                        authorities: ['ROLE_ADMIN', 'ROLE_USERS_MANAGER'],\n                        pageTitle: 'user-management.detail.title'\n                    },\n                    views: {\n                        'content@': {\n                            templateUrl: 'app/admin/user-management/user-management-detail.html',\n                            controller: 'UserManagementDetailController',\n                            controllerAs: 'vm'\n                        }\n                    },\n                    resolve: {\n                        translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                                $translatePartialLoader.addPart('user-management');\n                                return $translate.refresh();\n                            }]\n                    }\n                })\n                .state('user-management.new', {\n                    parent: 'user-management',\n                    url: '/new',\n                    data: {\n                        authorities: ['ROLE_ADMIN', 'ROLE_USERS_MANAGER']\n                    },\n                    onEnter: ['$stateParams', '$state', '$uibModal', function ($stateParams, $state, $uibModal) {\n                            $uibModal.open({\n                                templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                                controller: 'UserManagementDialogController',\n                                controllerAs: 'vm',\n                                backdrop: 'static',\n                                size: 'lg',\n                                resolve: {\n                                    entity: function () {\n                                        return {\n                                            id: null, login: null, firstName: null, lastName: null, email: null,\n                                            activated: true, langKey: null, createdBy: null, createdDate: null,\n                                            lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                                            resetKey: null, authorities: null\n                                        };\n                                    }\n                                }\n                            }).result.then(function () {\n                                $state.go('user-management', null, {reload: true});\n                            }, function () {\n                                $state.go('user-management');\n                            });\n                        }]\n                })\n                .state('user-management.edit', {\n                    parent: 'user-management',\n                    url: '/{login}/edit',\n                    data: {\n                        authorities: ['ROLE_ADMIN', 'ROLE_USERS_MANAGER']\n                    },\n                    onEnter: ['$stateParams', '$state', '$uibModal', function ($stateParams, $state, $uibModal) {\n                            $uibModal.open({\n                                templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                                controller: 'UserManagementDialogController',\n                                controllerAs: 'vm',\n                                backdrop: 'static',\n                                size: 'lg',\n                                resolve: {\n                                    entity: ['User', function (User) {\n                                            return User.get({login: $stateParams.login});\n                                        }]\n                                }\n                            }).result.then(function () {\n                                $state.go('user-management', null, {reload: true});\n                            }, function () {\n                                $state.go('^');\n                            });\n                        }]\n                })\n                .state('user-management.delete', {\n                    parent: 'user-management',\n                    url: '/{login}/delete',\n                    data: {\n                        authorities: ['ROLE_ADMIN', 'ROLE_USERS_MANAGER']\n                    },\n                    onEnter: ['$stateParams', '$state', '$uibModal', function ($stateParams, $state, $uibModal) {\n                            $uibModal.open({\n                                templateUrl: 'app/admin/user-management/user-management-delete-dialog.html',\n                                controller: 'UserManagementDeleteController',\n                                controllerAs: 'vm',\n                                size: 'md',\n                                resolve: {\n                                    entity: ['User', function (User) {\n                                            return User.get({login: $stateParams.login});\n                                        }]\n                                }\n                            }).result.then(function () {\n                                $state.go('user-management', null, {reload: true});\n                            }, function () {\n                                $state.go('^');\n                            });\n                        }]\n                });\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .controller('UserManagementController', UserManagementController);\n\n    UserManagementController.$inject = ['Principal', 'User', 'ParseLinks', 'AlertService', '$state', 'pagingParams', 'paginationConstants', 'JhiLanguageService'];\n\n    function UserManagementController(Principal, User, ParseLinks, AlertService, $state, pagingParams, paginationConstants, JhiLanguageService) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN', 'ROLE_USERS_MANAGER'];\n        vm.currentAccount = null;\n        vm.languages = null;\n        vm.loadAll = loadAll;\n        vm.setActive = setActive;\n        vm.users = [];\n        vm.page = 1;\n        vm.totalItems = null;\n        vm.clear = clear;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.transition = transition;\n        // method called to display/edit a user's meals information\n        vm.editUserMealsInformation = editUserMealsInformation;\n\n\n        vm.loadAll();\n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n        Principal.identity().then(function (account) {\n            vm.currentAccount = account;\n        });\n\n        function setActive(user, isActivated) {\n            user.activated = isActivated;\n            User.update(user, function () {\n                vm.loadAll();\n                vm.clear();\n            });\n        }\n\n        function loadAll() {\n            User.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n        }\n\n        function onSuccess(data, headers) {\n            // deactivate all actions on anonymous user from user management: it's a required user for Spring Security\n            for (var i in data) {\n                if (data[i]['login'] === 'anonymoususer') {\n                    data[i]['isAnonymous'] = true;\n                }\n            }\n            vm.links = ParseLinks.parse(headers('link'));\n            vm.totalItems = headers('X-Total-Count');\n            vm.queryCount = vm.totalItems;\n            vm.page = pagingParams.page;\n            vm.users = data;\n        }\n\n        function onError(error) {\n            AlertService.error(error.data.message);\n        }\n\n        function clear() {\n            vm.user = {\n                id: null, login: null, firstName: null, lastName: null, email: null,\n                activated: null, langKey: null, createdBy: null, createdDate: null,\n                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                resetKey: null, authorities: null\n            };\n        }\n\n        function sort() {\n            var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n            if (vm.predicate !== 'id') {\n                result.push('id');\n            }\n            return result;\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function editUserMealsInformation(aUserLogin) {\n            $state.go('user-calories', {'username': aUserLogin});\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('docs', {\n            parent: 'admin',\n            url: '/docs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'global.menu.admin.apidocs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/docs/docs.html'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', function ($translate) {\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('admin', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('settings', {\n            parent: 'account',\n            url: '/settings',\n            data: {\n                authorities: ['ROLE_USER', 'ROLE_ADMIN', 'ROLE_USERS_MANAGER'],\n                pageTitle: 'global.menu.account.settings'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/settings/settings.html',\n                    controller: 'SettingsController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        $translatePartialLoader.addPart('settings');\n                        return $translate.refresh();\n                    }]\n            }\n        });\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .controller('SettingsController', SettingsController);\n\n    SettingsController.$inject = ['Principal', 'Auth', 'JhiLanguageService', '$translate'];\n\n    function SettingsController(Principal, Auth, JhiLanguageService, $translate) {\n        var vm = this;\n\n        vm.error = null;\n        vm.save = save;\n        vm.settingsAccount = null;\n        vm.success = null;\n\n        /**\n         * Store the \"settings account\" in a separate variable, and not in the shared \"account\" variable.\n         */\n        var copyAccount = function (account) {\n            return {\n                activated: account.activated,\n                email: account.email,\n                firstName: account.firstName,\n                langKey: account.langKey,\n                lastName: account.lastName,\n                login: account.login,\n                calories: account.calories\n            };\n        };\n\n        Principal.identity().then(function (account) {\n            vm.settingsAccount = copyAccount(account);\n        });\n\n        function save() {\n            Auth.updateAccount(vm.settingsAccount).then(function () {\n                vm.error = null;\n                vm.success = 'OK';\n                Principal.identity(true).then(function (account) {\n                    vm.settingsAccount = copyAccount(account);\n                });\n                JhiLanguageService.getCurrent().then(function (current) {\n                    if (vm.settingsAccount.langKey !== current) {\n                        $translate.use(vm.settingsAccount.langKey);\n                    }\n                });\n            }).catch(function () {\n                vm.success = null;\n                vm.error = 'ERROR';\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('requestReset', {\n            parent: 'account',\n            url: '/reset/request',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/request/reset.request.html',\n                    controller: 'RequestResetController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('reset');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .controller('RequestResetController', RequestResetController);\n\n    RequestResetController.$inject = ['$timeout', 'Auth'];\n\n    function RequestResetController ($timeout, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.errorEmailNotExists = null;\n        vm.requestReset = requestReset;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#email').focus();});\n\n        function requestReset () {\n\n            vm.error = null;\n            vm.errorEmailNotExists = null;\n\n            Auth.resetPasswordInit(vm.resetAccount.email).then(function () {\n                vm.success = 'OK';\n            }).catch(function (response) {\n                vm.success = null;\n                if (response.status === 400 && response.data === 'e-mail address not registered') {\n                    vm.errorEmailNotExists = 'ERROR';\n                } else {\n                    vm.error = 'ERROR';\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('finishReset', {\n            parent: 'account',\n            url: '/reset/finish?key',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/finish/reset.finish.html',\n                    controller: 'ResetFinishController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('reset');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .controller('ResetFinishController', ResetFinishController);\n\n    ResetFinishController.$inject = ['$stateParams', '$timeout', 'Auth', 'LoginService'];\n\n    function ResetFinishController($stateParams, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.keyMissing = angular.isUndefined($stateParams.key);\n        vm.confirmPassword = null;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.finishReset = finishReset;\n        vm.login = LoginService.open;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function () {\n            angular.element('#password').focus();\n        });\n\n        function finishReset() {\n            vm.doNotMatch = null;\n            vm.error = null;\n            if (vm.resetAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                Auth.resetPasswordFinish({key: $stateParams.key, newPassword: vm.resetAccount.password}).then(function () {\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('register', {\n            parent: 'account',\n            url: '/register',\n            data: {\n                authorities: [],\n                pageTitle: 'register.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/register/register.html',\n                    controller: 'RegisterController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('register');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .controller('RegisterController', RegisterController);\n\n\n    RegisterController.$inject = ['$translate', '$timeout', 'Auth', 'LoginService'];\n\n    function RegisterController($translate, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.errorUserExists = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        vm.registerAccount = {};\n        vm.success = null;\n\n        $timeout(function () {\n            angular.element('#login').focus();\n        });\n\n        function register() {\n            if (vm.registerAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.registerAccount.langKey = $translate.use();\n                vm.doNotMatch = null;\n                vm.error = null;\n                vm.errorUserExists = null;\n                vm.errorEmailExists = null;\n\n                Auth.createAccount(vm.registerAccount).then(function () {\n                    vm.success = 'OK';\n                }).catch(function (response) {\n                    vm.success = null;\n                    if (response.status === 400 && response.data === 'login already in use') {\n                        vm.errorUserExists = 'ERROR';\n                    } else if (response.status === 400 && response.data === 'e-mail address already in use') {\n                        vm.errorEmailExists = 'ERROR';\n                    } else {\n                        vm.error = 'ERROR';\n                    }\n                });\n            }\n        }\n    }\n})();\n\n/* globals $ */\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .directive('passwordStrengthBar', passwordStrengthBar);\n\n    function passwordStrengthBar () {\n        var directive = {\n            replace: true,\n            restrict: 'E',\n            template: '<div id=\"strength\">' +\n                '<small data-translate=\"global.messages.validate.newpassword.strength\">Password strength:</small>' +\n                '<ul id=\"strengthBar\">' +\n                '<li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li>' +\n                '</ul>' +\n                '</div>',\n            scope: {\n                passwordToCheck: '='\n            },\n            link: linkFunc\n        };\n\n        return directive;\n\n        /* private helper methods*/\n\n        function linkFunc(scope, iElement) {\n            var strength = {\n                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],\n                mesureStrength: function (p) {\n\n                    var _force = 0;\n                    var _regex = /[$-/:-?{-~!\"^_`\\[\\]]/g; // \"\n\n                    var _lowerLetters = /[a-z]+/.test(p);\n                    var _upperLetters = /[A-Z]+/.test(p);\n                    var _numbers = /[0-9]+/.test(p);\n                    var _symbols = _regex.test(p);\n\n                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];\n                    var _passedMatches = $.grep(_flags, function (el) {\n                        return el === true;\n                    }).length;\n\n                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);\n                    _force += _passedMatches * 10;\n\n                    // penalty (short password)\n                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;\n\n                    // penalty (poor variety of characters)\n                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;\n                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;\n                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;\n\n                    return _force;\n\n                },\n                getColor: function (s) {\n\n                    var idx;\n                    if (s <= 10) {\n                        idx = 0;\n                    }\n                    else if (s <= 20) {\n                        idx = 1;\n                    }\n                    else if (s <= 30) {\n                        idx = 2;\n                    }\n                    else if (s <= 40) {\n                        idx = 3;\n                    }\n                    else {\n                        idx = 4;\n                    }\n\n                    return { idx: idx + 1, col: this.colors[idx] };\n                }\n            };\n            scope.$watch('passwordToCheck', function (password) {\n                if (password) {\n                    var c = strength.getColor(strength.mesureStrength(password));\n                    iElement.removeClass('ng-hide');\n                    iElement.find('ul').children('li')\n                        .css({ 'background-color': '#DDD' })\n                        .slice(0, c.idx)\n                        .css({ 'background-color': c.col });\n                }\n            });\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('password', {\n            parent: 'account',\n            url: '/password',\n            data: {\n                authorities: ['ROLE_USER', 'ROLE_ADMIN', 'ROLE_USERS_MANAGER'],\n                pageTitle: 'global.menu.account.password'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/password/password.html',\n                    controller: 'PasswordController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        $translatePartialLoader.addPart('password');\n                        return $translate.refresh();\n                    }]\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .controller('PasswordController', PasswordController);\n\n    PasswordController.$inject = ['Auth', 'Principal'];\n\n    function PasswordController (Auth, Principal) {\n        var vm = this;\n\n        vm.changePassword = changePassword;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.success = null;\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function changePassword () {\n            if (vm.password !== vm.confirmPassword) {\n                vm.error = null;\n                vm.success = null;\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.doNotMatch = null;\n                Auth.changePassword(vm.password).then(function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('activate', {\n            parent: 'account',\n            url: '/activate?key',\n            data: {\n                authorities: [],\n                pageTitle: 'activate.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/activate/activate.html',\n                    controller: 'ActivationController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('activate');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n            .module('caloappApp')\n            .controller('ActivationController', ActivationController);\n\n    ActivationController.$inject = ['$stateParams', 'Auth', 'LoginService'];\n\n    function ActivationController($stateParams, Auth, LoginService) {\n        var vm = this;\n\n        Auth.activateAccount({key: $stateParams.key}).then(function () {\n            vm.error = null;\n            vm.success = 'OK';\n        }).catch(function () {\n            vm.success = null;\n            vm.error = 'ERROR';\n        });\n\n        vm.login = LoginService.open;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('caloappApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('account', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n(function(){angular.module('caloappApp').run(['$templateCache', function($templateCache) {$templateCache.put('app/calories/calories.html','<div class=\"calories-screen-container\"><!-- Title bloc --><div class=\"calories-screen-title-cintainer\"><!-- Case an administrator is editing information --><h1 ng-if=\"!vm.isSameUser\" data-translate=\"calories.title.notSameUser\" translate-values=\"{userLogin : vm.userLogin}\"></h1><br><h2 ng-if=\"!vm.isSameUser\" data-translate=\"calories.subTitle.2\">Here are the meals\\' information</h2><!-- Case user editing his own information --><h2 ng-if=\"vm.isSameUser\" data-translate=\"calories.subTitle.1\">Here are your meals\\' information</h2></div><jhi-alert-error></jhi-alert-error><!-- Filters container --><div class=\"filter-container\"><!-- If any field is inquired all the field are so required --><form class=\"form\" role=\"form\" ng-submit=\"vm.loadMealsInformationByFilter($event)\"><!-- Error message --><div class=\"alert alert-danger\" ng-if=\"vm.filterErrorMessageToDisplay\">{{vm.filterErrorMessageToDisplay}}</div><div class=\"row\"><!-- From block --><div class=\"col-md-4 col-sm-6\"><!-- Date --><div class=\"date-from\"><label data-translate=\"calories.filter.from\">From</label><input type=\"date\" ng-model=\"vm.filterInformationForScreen.beginDate\" ng-required=\"vm.filterInformationForScreen.beginTime ||\\xA0vm.filterInformationForScreen.endDate || vm.filterInformationForScreen.endTime\"></div><!-- Time --><div class=\"time-from\"><label data-translate=\"calories.filter.from\">From</label><input type=\"time\" ng-model=\"vm.filterInformationForScreen.beginTime\" ng-required=\"vm.filterInformationForScreen.beginDate ||\\xA0vm.filterInformationForScreen.endDate || vm.filterInformationForScreen.endTime\"></div></div><!-- To block --><div class=\"col-md-8 col-sm-6\"><!-- Date --><div class=\"date-to\"><label data-translate=\"calories.filter.to\">To</label><input type=\"date\" ng-model=\"vm.filterInformationForScreen.endDate\" ng-required=\"vm.filterInformationForScreen.beginTime ||\\xA0vm.filterInformationForScreen.beginDate || vm.filterInformationForScreen.endTime\"></div><!-- Time --><div class=\"time-to\"><label data-translate=\"calories.filter.to\">To</label><input type=\"time\" ng-model=\"vm.filterInformationForScreen.endTime\" ng-required=\"vm.filterInformationForScreen.beginTime ||\\xA0vm.filterInformationForScreen.endDate || vm.filterInformationForScreen.beginDate\"></div></div></div><div class=\"button-container\"><!-- Clean button --> <button class=\"btn\" ng-click=\"vm.clearFilter()\" type=\"button\" data-translate=\"calories.filter.button.clear\">Clear</button><!-- Validation button line --> <button class=\"btn btn-primary\" type=\"submit\" data-translate=\"calories.filter.button.filter\">Filter</button></div></form></div><!-- Add meal information button container --><div class=\"add-meal-button-container\"><button type=\"button\" class=\"btn btn-raised btn-success\" data-ng-click=\"vm.openMealModal()\">Add Meal information</button> <button data-ng-click=\"vm.openMealModal()\" type=\"button\" class=\"btn btn-fab btn-success\"><span class=\"glyphicon glyphicon-plus\"></span></button></div><!-- Loading spinner --><div class=\"loading-spinner-class\" ng-if=\"vm.isListMealsInformationLoading\"><span us-spinner=\"{radius:20, width:4, length: 8}\"></span></div><!-- Meals information table --><div ng-if=\"vm.mealInformationsSimpleList && vm.mealInformationsSimpleList.length > 0\" class=\"table-responsive calories-screen-table-container\"><table class=\"table table-striped calories-screen-table\"><!-- Tables header --><thead><tr callback=\"vm.transition()\"><th><span data-translate=\"calories.table.headers.date\">Date</span></th><th><span data-translate=\"calories.table.headers.description\">Description</span></th><th><span data-translate=\"calories.table.headers.calories\">Calories</span></th><th><span data-translate=\"calories.table.headers.time\">Time</span></th><th><span data-translate=\"calories.table.headers.actions\">Actions</span></th></tr></thead><tbody><tr ng-repeat=\"mealInformation in vm.mealInformationsSimpleList track by $index\"><!-- The Date --><td ng-if=\"vm.listInformationByDate[mealInformation.date].index == $index\" rowspan=\"{{vm.listInformationByDate[mealInformation.date].index == $index ? vm.listInformationByDate[mealInformation.date].nbElts: 1}}\"><span ng-if=\"vm.dailyCaloriesLimit\" class=\"fa\" ng-class=\"{ \\'fa-frown-o check-limit-red\\' : vm.checkLimit(mealInformation.date),\\n                                        \\'fa-smile-o check-limit-green\\' : (!vm.checkLimit(mealInformation.date))}\"></span> &nbsp;&nbsp;{{mealInformation.date| date:\\'dd-MM-yy\\'}}</td><!-- The description --><td>{{mealInformation.description}}</td><!-- The calories --><td>{{mealInformation.calories}}</td><!-- The time --><td>{{mealInformation.timeToDisplay}}</td><!-- The actions to perform on the meal information --><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><!-- Edit information --> <button type=\"submit\" ng-click=\"vm.editMealInformation(mealInformation)\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"calories.table.action.edit\"></span></button><!-- Delete information --> <button type=\"submit\" ui-sref=\"user-calories.delete({idMealInfo:mealInformation.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"calories.table.action.delete\"></span></button></div></td></tr></tbody></table></div><!-- The paging --><div ng-if=\"vm.mealInformationsSimpleList && vm.mealInformationsSimpleList.length > 0\" class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div><!-- Message to display when no Meal information is found --><div ng-if=\"((!vm.mealInformationsSimpleList) || vm.mealInformationsSimpleList.length == 0) && (!vm.isListMealsInformationLoading)\" class=\"no-information-found-container\"><span data-translate=\"calories.noMealFound\">No meal information is defined yet</span></div></div>');\n$templateCache.put('app/home/home.html','<div class=\"home-container\" ng-cloak><div class=\"home-content\"><div ng-controller=\"LoginController as vm\"><ng-include src=\"\\'app/components/login/login.html\\'\"></ng-include></div></div></div>');\n$templateCache.put('app/account/activate/activate.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h1 data-translate=\"activate.title\">Activation</h1><div class=\"alert alert-success\" ng-show=\"vm.success\" data-translate=\"activate.messages.success\" translate-compile><strong>Your user has been activated.</strong> Please <a class=\"alert-link\" href=\"\" ng-click=\"vm.login()\">sign in</a>.</div><div class=\"alert alert-danger\" ng-show=\"vm.error\" data-translate=\"activate.messages.error\"><strong>Your user could not be activated.</strong> Please use the registration form to sign up.</div></div></div></div>');\n$templateCache.put('app/account/password/password.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h2 data-translate=\"password.title\" translate-values=\"{username: \\'{{vm.account.login}}\\'}\">Password for [<b>{{vm.account.login}}</b>]</h2><div class=\"alert alert-success\" ng-show=\"vm.success\" data-translate=\"password.messages.success\"><strong>Password changed!</strong></div><div class=\"alert alert-danger\" ng-show=\"vm.error\" data-translate=\"password.messages.error\"><strong>An error has occurred!</strong> The password could not be changed.</div><div class=\"alert alert-danger\" ng-show=\"vm.doNotMatch\" data-translate=\"global.messages.error.dontmatch\">The password and its confirmation do not match!</div><form name=\"form\" role=\"form\" novalidate ng-submit=\"vm.changePassword()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"password\" data-translate=\"global.form.newpassword\">New password</label><input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"{{\\'global.form.newpassword.placeholder\\'| translate}}\" ng-model=\"vm.password\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.password.$dirty && form.password.$invalid\"><p class=\"help-block\" ng-show=\"form.password.$error.required\" data-translate=\"global.messages.validate.newpassword.required\">Your password is required.</p><p class=\"help-block\" ng-show=\"form.password.$error.minlength\" data-translate=\"global.messages.validate.newpassword.minlength\">Your password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.password.$error.maxlength\" data-translate=\"global.messages.validate.newpassword.maxlength\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\"vm.password\"></password-strength-bar></div><div class=\"form-group\"><label class=\"control-label\" for=\"confirmPassword\" data-translate=\"global.form.confirmpassword\">New password confirmation</label><input type=\"password\" class=\"form-control\" id=\"confirmPassword\" name=\"confirmPassword\" placeholder=\"{{\\'global.form.confirmpassword.placeholder\\'| translate}}\" ng-model=\"vm.confirmPassword\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.required\" data-translate=\"global.messages.validate.confirmpassword.required\">Your confirmation password is required.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.minlength\" data-translate=\"global.messages.validate.confirmpassword.minlength\">Your confirmation password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.maxlength\" data-translate=\"global.messages.validate.confirmpassword.maxlength\">Your confirmation password cannot be longer than 50 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-raised btn-primary btn-block\" data-translate=\"password.form.button\">Save</button></form></div></div></div>');\n$templateCache.put('app/account/register/register.html','<div class=\"register-container\"><div class=\"row register-row\"><div class=\"common-form-block\"><h1 data-translate=\"register.title\">Registration</h1><div class=\"alert alert-success\" ng-show=\"vm.success\" data-translate=\"register.messages.success\"><strong>Registration saved!</strong> Please check your email for confirmation.</div><div class=\"alert alert-danger\" ng-show=\"vm.error\" data-translate=\"register.messages.error.fail\"><strong>Registration failed!</strong> Please try again later.</div><div class=\"alert alert-danger\" ng-show=\"vm.errorUserExists\" data-translate=\"register.messages.error.userexists\"><strong>Login name already registered!</strong> Please choose another one.</div><div class=\"alert alert-danger\" ng-show=\"vm.errorEmailExists\" data-translate=\"register.messages.error.emailexists\"><strong>E-mail is already in use!</strong> Please choose another one.</div><div class=\"alert alert-danger\" ng-show=\"vm.doNotMatch\" data-translate=\"global.messages.error.dontmatch\">The password and its confirmation do not match!</div></div><div class=\"common-form-block\"><form ng-show=\"!vm.success\" name=\"form\" role=\"form\" novalidate ng-submit=\"vm.register()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"login\" data-translate=\"global.form.username\">Username</label><input type=\"text\" class=\"form-control\" id=\"login\" name=\"login\" placeholder=\"{{\\'global.form.username.placeholder\\'| translate}}\" ng-model=\"vm.registerAccount.login\" ng-minlength=\"1\" ng-maxlength=\"50\" ng-pattern=\"/^[_\\'.@A-Za-z0-9-]*$/\" required><div ng-show=\"form.login.$dirty && form.login.$invalid\"><p class=\"help-block\" ng-show=\"form.login.$error.required\" data-translate=\"register.messages.validate.login.required\">Your username is required.</p><p class=\"help-block\" ng-show=\"form.login.$error.minlength\" data-translate=\"register.messages.validate.login.minlength\">Your username is required to be at least 1 character.</p><p class=\"help-block\" ng-show=\"form.login.$error.maxlength\" data-translate=\"register.messages.validate.login.maxlength\">Your username cannot be longer than 50 characters.</p><p class=\"help-block\" ng-show=\"form.login.$error.pattern\" data-translate=\"register.messages.validate.login.pattern\">Your username can only contain lower-case letters and digits.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"email\" data-translate=\"global.form.email\">E-mail</label><input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"{{\\'global.form.email.placeholder\\'| translate}}\" ng-model=\"vm.registerAccount.email\" ng-minlength=\"5\" ng-maxlength=\"100\" required><div ng-show=\"form.email.$dirty && form.email.$invalid\"><p class=\"help-block\" ng-show=\"form.email.$error.required\" data-translate=\"global.messages.validate.email.required\">Your e-mail is required.</p><p class=\"help-block\" ng-show=\"form.email.$error.email\" data-translate=\"global.messages.validate.email.invalid\">Your e-mail is invalid.</p><p class=\"help-block\" ng-show=\"form.email.$error.minlength\" data-translate=\"global.messages.validate.email.minlength\">Your e-mail is required to be at least 5 characters.</p><p class=\"help-block\" ng-show=\"form.email.$error.maxlength\" data-translate=\"global.messages.validate.email.maxlength\">Your e-mail cannot be longer than 100 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"password\" data-translate=\"global.form.newpassword\">New password</label><input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"{{\\'global.form.newpassword.placeholder\\'| translate}}\" ng-model=\"vm.registerAccount.password\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.password.$dirty && form.password.$invalid\"><p class=\"help-block\" ng-show=\"form.password.$error.required\" data-translate=\"global.messages.validate.newpassword.required\">Your password is required.</p><p class=\"help-block\" ng-show=\"form.password.$error.minlength\" data-translate=\"global.messages.validate.newpassword.minlength\">Your password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.password.$error.maxlength\" data-translate=\"global.messages.validate.newpassword.maxlength\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\"vm.registerAccount.password\"></password-strength-bar></div><div class=\"form-group\"><label class=\"control-label\" for=\"confirmPassword\" data-translate=\"global.form.confirmpassword\">New password confirmation</label><input type=\"password\" class=\"form-control\" id=\"confirmPassword\" name=\"confirmPassword\" placeholder=\"{{\\'global.form.confirmpassword.placeholder\\'| translate}}\" ng-model=\"vm.confirmPassword\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.required\" data-translate=\"global.messages.validate.confirmpassword.required\">Your confirmation password is required.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.minlength\" data-translate=\"global.messages.validate.confirmpassword.minlength\">Your confirmation password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.maxlength\" data-translate=\"global.messages.validate.confirmpassword.maxlength\">Your confirmation password cannot be longer than 50 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-raised btn-primary btn-block\" data-translate=\"register.form.button\">Register</button></form></div></div></div>');\n$templateCache.put('app/account/settings/settings.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h2 data-translate=\"settings.title\" translate-values=\"{username: \\'{{vm.settingsAccount.login}}\\'}\">User settings for [<b>{{vm.settingsAccount.login}}</b>]</h2><div class=\"alert alert-success\" ng-show=\"vm.success\" data-translate=\"settings.messages.success\"><strong>Settings saved!</strong></div><jhi-alert-error></jhi-alert-error><form name=\"form\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><!-- The number of calories --><div class=\"form-group\"><!-- The label --><label class=\"control-label\" for=\"calories\" data-translate=\"settings.form.calories\">Calories / Day</label><!-- The input --> <input type=\"number\" class=\"form-control\" id=\"calories\" name=\"calories\" placeholder=\"{{\\'settings.form.calories.placeholder\\'| translate}}\" ng-model=\"vm.settingsAccount.calories\" min=\"0\" required><!-- The error messages --><div ng-show=\"form.calories.$dirty && form.calories.$invalid\"><p class=\"help-block\" ng-show=\"form.calories.$error.required\" data-translate=\"settings.messages.validate.calories.required\">The number of calories/day is required.</p></div></div><!-- First name --><div class=\"form-group\"><label class=\"control-label\" for=\"firstName\" data-translate=\"settings.form.firstname\">First Name</label><input type=\"text\" class=\"form-control\" id=\"firstName\" name=\"firstName\" placeholder=\"{{\\'settings.form.firstname.placeholder\\'| translate}}\" ng-model=\"vm.settingsAccount.firstName\" ng-minlength=\"1\" ng-maxlength=\"50\" required maxlength=\"50\"><div ng-show=\"form.firstName.$dirty && form.firstName.$invalid\"><p class=\"help-block\" ng-show=\"form.firstName.$error.required\" data-translate=\"settings.messages.validate.firstname.required\">Your first name is required.</p><p class=\"help-block\" ng-show=\"form.firstName.$error.minlength\" data-translate=\"settings.messages.validate.firstname.minlength\">Your first name is required to be at least 1 character.</p><p class=\"help-block\" ng-show=\"form.firstName.$error.maxlength\" data-translate=\"settings.messages.validate.firstname.maxlength\">Your first name cannot be longer than 50 characters.</p></div></div><!-- Last name --><div class=\"form-group\"><label class=\"control-label\" for=\"lastName\" data-translate=\"settings.form.lastname\">Last Name</label><input type=\"text\" class=\"form-control\" id=\"lastName\" name=\"lastName\" placeholder=\"{{\\'settings.form.lastname.placeholder\\'| translate}}\" ng-model=\"vm.settingsAccount.lastName\" ng-minlength=\"1\" ng-maxlength=\"50\" required maxlength=\"50\"><div ng-show=\"form.lastName.$dirty && form.lastName.$invalid\"><p class=\"help-block\" ng-show=\"form.lastName.$error.required\" data-translate=\"settings.messages.validate.lastname.required\">Your last name is required.</p><p class=\"help-block\" ng-show=\"form.lastName.$error.minlength\" data-translate=\"settings.messages.validate.lastname.minlength\">Your last name is required to be at least 1 character.</p><p class=\"help-block\" ng-show=\"form.lastName.$error.maxlength\" data-translate=\"settings.messages.validate.lastname.maxlength\">Your last name cannot be longer than 50 characters.</p></div></div><!-- Email --><div class=\"form-group\"><label class=\"control-label\" for=\"email\" data-translate=\"global.form.email\">E-mail</label><input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"{{\\'global.form.email.placeholder\\'| translate}}\" ng-model=\"vm.settingsAccount.email\" ng-minlength=\"5\" ng-maxlength=\"100\" required maxlength=\"100\"><div ng-show=\"form.email.$dirty && form.email.$invalid\"><p class=\"help-block\" ng-show=\"form.email.$error.required\" data-translate=\"global.messages.validate.email.required\">Your e-mail is required.</p><p class=\"help-block\" ng-show=\"form.email.$error.email\" data-translate=\"global.messages.validate.email.invalid\">Your e-mail is invalid.</p><p class=\"help-block\" ng-show=\"form.email.$error.minlength\" data-translate=\"global.messages.validate.email.minlength\">Your e-mail is required to be at least 5 characters.</p><p class=\"help-block\" ng-show=\"form.email.$error.maxlength\" data-translate=\"global.messages.validate.email.maxlength\">Your e-mail cannot be longer than 100 characters.</p></div></div><!-- Language --><div class=\"form-group\"><label for=\"langKey\" data-translate=\"settings.form.language\">Language</label><select id=\"langKey\" name=\"langKey\" class=\"form-control\" ng-model=\"vm.settingsAccount.langKey\" ng-controller=\"JhiLanguageController as languageVm\" ng-options=\"code as (code |              findLanguageFromKey) for code in languageVm.languages\"></select></div><!-- Submission button --> <button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-raised btn-primary btn-block\" data-translate=\"settings.form.button\">Save</button></form></div></div></div>');\n$templateCache.put('app/admin/docs/docs.html','<iframe src=\"swagger-ui/index.html\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\" width=\"100%\" height=\"900\" scrolling=\"auto\" target=\"_top\" title=\"Swagger UI\"></iframe>');\n$templateCache.put('app/admin/user-management/user-management-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.user.login)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" data-translate=\"entity.delete.title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p data-translate=\"userManagement.delete.question\" translate-values=\"{login: \\'{{vm.user.login}}\\'}\">Are you sure you want to delete this User?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span data-translate=\"entity.action.cancel\">Cancel</span></button> <button type=\"submit\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span data-translate=\"entity.action.delete\">Delete</span></button></div></form>');\n$templateCache.put('app/admin/user-management/user-management-detail.html','<div><h2><span data-translate=\"userManagement.detail.title\">User</span> \"{{vm.user.login}}\"</h2><dl class=\"dl-horizontal\"><dt><span data-translate=\"userManagement.login\">Login</span></dt><dd><span>{{vm.user.login}}</span></dd><dt><span data-translate=\"userManagement.firstName\">First Name</span></dt><dd>{{vm.user.firstName}}</dd><dt><span data-translate=\"userManagement.lastName\">Last Name</span></dt><dd>{{vm.user.lastName}}</dd><!-- Calories --><dt ng-if=\"vm.user.calories\"><span data-translate=\"userManagement.calories\">Calories</span></dt><dd ng-if=\"vm.user.calories\">{{vm.user.calories}}</dd><dt><span data-translate=\"userManagement.email\">Email</span></dt><dd>{{vm.user.email}}</dd><dt><span data-translate=\"userManagement.activated\">Activated</span></dt><dd>{{vm.user.activated}}</dd><dt><span data-translate=\"userManagement.langKey\">Lang Key</span></dt><dd>{{vm.user.langKey}}</dd><dt><span data-translate=\"userManagement.createdBy\">Created By</span></dt><dd>{{vm.user.createdBy}}</dd><dt><span data-translate=\"userManagement.createdDate\">Created Date</span></dt><dd>{{vm.user.createdDate| date:\\'dd/MM/yy HH:mm\\' }}</dd><dt><span data-translate=\"userManagement.lastModifiedBy\">Last Modified By</span></dt><dd>{{vm.user.lastModifiedBy}}</dd><dt><span data-translate=\"userManagement.lastModifiedDate\">Last Modified Date</span></dt><dd>{{vm.user.lastModifiedDate| date:\\'dd/MM/yy HH:mm\\'}}</dd><dt><span data-translate=\"userManagement.profiles\">Profiles</span></dt><dd><ul class=\"list-unstyled\"><li ng-repeat=\"authority in vm.user.authorities\"><span>{{authority}}</span></li></ul></dd></dl><button type=\"submit\" ui-sref=\"user-management\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span data-translate=\"entity.action.back\"> Back</span></button></div>');\n$templateCache.put('app/admin/user-management/user-management-dialog.html','<form name=\"editForm\" id=\"editCreateUserForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myUserLabel\" data-translate=\"userManagement.home.createOrEditLabel\">Create or edit a User</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><!-- User ID --><div class=\"form-group\"><label data-translate=\"global.field.id\">ID</label><input type=\"text\" class=\"form-control\" name=\"id\" ng-model=\"vm.user.id\" readonly=\"readonly\"></div><!-- User login --><div class=\"form-group\"><label class=\"control-label\" data-translate=\"userManagement.login\">Login</label><input type=\"text\" class=\"form-control\" name=\"login\" ng-model=\"vm.user.login\" ng-required=\"vm.user.id == null\" ng-minlength=\"1\" ng-maxlength=\"50\" ng-pattern=\"/^[_\\'.@A-Za-z0-9-]*$/\"><div ng-show=\"editForm.login.$invalid\"><p class=\"help-block\" ng-show=\"editForm.login.$error.required\" data-translate=\"entity.validation.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.login.$error.maxlength\" data-translate=\"entity.validation.maxlength\" translate-value-max=\"50\">This field cannot be longer than 50 characters.</p></div></div><!-- User first name --><div class=\"form-group\"><label class=\"control-label\" data-translate=\"userManagement.firstName\">First Name</label><input type=\"text\" class=\"form-control\" name=\"firstName\" ng-model=\"vm.user.firstName\" ng-maxlength=\"50\"><div ng-show=\"editForm.firstName.$invalid\"><p class=\"help-block\" ng-show=\"editForm.firstName.$error.maxlength\" data-translate=\"entity.validation.maxlength\" translate-value-max=\"50\">This field cannot be longer than 50 characters.</p></div></div><!-- User last name --><div class=\"form-group\"><label data-translate=\"userManagement.lastName\">Last Name</label><input type=\"text\" class=\"form-control\" name=\"lastName\" ng-model=\"vm.user.lastName\" ng-maxlength=\"50\"><div ng-show=\"editForm.lastName.$invalid\"><p class=\"help-block\" ng-show=\"editForm.lastName.$error.maxlength\" data-translate=\"entity.validation.maxlength\" translate-value-max=\"50\">This field cannot be longer than 50 characters.</p></div></div><!-- Calories per day --><div class=\"form-group\"><label class=\"control-label\" data-translate=\"userManagement.calories\">Calories</label><input type=\"number\" class=\"form-control\" name=\"calories\" ng-model=\"vm.user.calories\" min=\"0\"></div><!-- User email --><div class=\"form-group\"><label class=\"control-label\" data-translate=\"userManagement.email\">Email</label><input type=\"email\" class=\"form-control\" name=\"email\" ng-model=\"vm.user.email\" required ng-maxlength=\"100\"><div ng-show=\"editForm.email.$invalid\"><p class=\"help-block\" ng-show=\"editForm.email.$error.required\" data-translate=\"entity.validation.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.email.$error.maxlength\" data-translate=\"entity.validation.maxlength\" translate-value-max=\"100\">This field cannot be longer than 100 characters.</p><p class=\"help-block\" ng-show=\"editForm.email.$error.email\" data-translate=\"global.messages.validate.email.invalid\">Your e-mail is invalid.</p></div></div><!-- Activated --><div class=\"form-group\"><label for=\"activated\"><input ng-disabled=\"vm.user.id === null\" type=\"checkbox\" id=\"activated\" name=\"activated\" ng-model=\"vm.user.activated\"> <span data-translate=\"userManagement.activated\">Activated</span></label></div><!-- Language --><div class=\"form-group\"><label data-translate=\"userManagement.langKey\">Lang Key</label><select class=\"form-control\" name=\"langKey\" ng-model=\"vm.user.langKey\" ng-options=\"language as language for language in vm.languages track by language\"></select></div><!-- Authorities --><div class=\"form-group\"><label data-translate=\"userManagement.profiles\">Profiles</label><select class=\"form-control\" multiple=\"multiple\" name=\"authority\" ng-model=\"vm.user.authorities\" ng-options=\"authority for authority in vm.authorities\"></select></div></div><!-- button --><div class=\"modal-footer\"><!-- Cancel --> <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span data-translate=\"entity.action.cancel\">Cancel</span></button><!-- Edition validation --> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span data-translate=\"entity.action.save\">Save</span></button></div></form>');\n$templateCache.put('app/admin/user-management/user-management.html','<div><h2 data-translate=\"userManagement.home.title\">Users</h2><jhi-alert></jhi-alert><!-- New user creation --><div class=\"row\"><div class=\"col-md-4\"><button class=\"btn btn-primary\" ui-sref=\"user-management.new\"><span class=\"glyphicon glyphicon-flash\"></span> <span data-translate=\"userManagement.home.createLabel\">Create a new User</span></button></div></div><!-- Users tables --><div class=\"table-responsive\"><table class=\"table table-striped\"><!-- Table headers --><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span data-translate=\"global.field.id\">ID</span><span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"login\"><span data-translate=\"userManagement.login\">Login</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"email\"><span data-translate=\"userManagement.email\">Email</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th><th jh-sort-by=\"langKey\"><span data-translate=\"userManagement.langKey\">Lang Key</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th><span data-translate=\"userManagement.profiles\">Profiles</span></th><th jh-sort-by=\"createdDate\"><span data-translate=\"userManagement.createdDate\">Created Date</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"lastModifiedBy\"><span data-translate=\"userManagement.lastModifiedBy\">Last Modified By</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"lastModifiedDate\"><span data-translate=\"userManagement.lastModifiedDate\">Last Modified Date</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><!-- User information --><tbody><tr ng-repeat=\"user in vm.users track by user.id\"><td><a ui-sref=\"user-management-detail({login:user.login})\">{{user.id}}</a></td><td>{{user.login}}</td><td>{{user.email}}</td><!-- Case not the Anonymous user --><td ng-if=\"!user.isAnonymous\"><span class=\"label label-danger\" ng-click=\"vm.setActive(user, true)\" ng-show=\"!user.activated\" data-translate=\"userManagement.deactivated\" style=\"cursor: pointer\">Deactivated</span> <span class=\"label label-success\" ng-click=\"vm.setActive(user, false)\" ng-show=\"user.activated\" data-translate=\"userManagement.activated\" style=\"cursor: pointer\">Activated</span></td><!-- Case the Anonymous user --><td ng-if=\"user.isAnonymous\"><span class=\"label label-success\" ng-show=\"user.activated\" data-translate=\"userManagement.activated\">Activated</span></td><td>{{user.langKey}}</td><td><div ng-repeat=\"authority in user.authorities\"><span class=\"label label-info\">{{ authority}}</span></div></td><td>{{user.createdDate| date:\\'dd/MM/yy HH:mm\\'}}</td><td>{{user.lastModifiedBy}}</td><td>{{user.lastModifiedDate| date:\\'dd/MM/yy HH:mm\\'}}</td><!-- Actions upon a user --><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><!-- Consultation button --> <button type=\"submit\" ui-sref=\"user-management-detail({login:user.login})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.view\"></span></button><!-- Profile Edition button --> <button type=\"submit\" ui-sref=\"user-management.edit({login:user.login})\" class=\"btn btn-primary btn-sm\" ng-disabled=\"user.isAnonymous\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.edit\"></span></button><!-- Calories Edition button : only available for a user with role ROLE_ADMIN --> <button has-authority=\"ROLE_ADMIN\" type=\"button\" ng-click=\"vm.editUserMealsInformation(user.login)\" class=\"btn btn-success btn-sm\" ng-disabled=\"user.isAnonymous\"><span class=\"glyphicon glyphicon-heart\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.calories\"></span></button><!-- Deletion button --> <button type=\"submit\" ui-sref=\"user-management.delete({login:user.login})\" class=\"btn btn-danger btn-sm\" ng-disabled=\"vm.currentAccount.login == user.login || user.isAnonymous\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.delete\"></span></button></div></td></tr></tbody></table></div><!-- Paging --><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/calories/delete/user-calories-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.mealInformationId)\"><!-- The header with the title --><div class=\"modal-header\"><!-- Close button --> <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><!-- The title --><h4 class=\"modal-title\" data-translate=\"entity.delete.title\">Confirm delete operation</h4></div><!-- The modal body --><div class=\"modal-body\"><!-- Error message --><jhi-alert-error></jhi-alert-error><!-- Confirmation question --><p data-translate=\"calories.table.delete.question\">Are you sure you want to delete this Meal Information ?</p></div><!-- buttons --><div class=\"modal-footer\"><!-- Cancel button --> <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span data-translate=\"entity.action.cancel\">Cancel</span></button><!-- Deletion Confirmation button --> <button type=\"submit\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span data-translate=\"entity.action.delete\">Delete</span></button></div></form>');\n$templateCache.put('app/calories/modal/calories.modal.html','<div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.cancel()\">&times;</button></div><div class=\"modal-body calories-modal-container\"><div class=\"row\"><!-- The title --><div class=\"title\"><h1 data-translate=\"calories.modal.title\">Meal Information</h1></div><!-- The error message --><div class=\"col-md-8 col-md-offset-2\"><div class=\"alert alert-danger\" ng-show=\"vm.editionOrCreationError\" data-translate=\"calories.modal.messages.error.failed\">Operation failed ! Please check all input are well inquired and try again.</div></div><!-- The form container --><div class=\"col-md-8 col-md-offset-2\"><form class=\"form\" role=\"form\" ng-submit=\"vm.save($event)\"><!-- The meal description --><div class=\"form-group\"><label for=\"meal\" data-translate=\"calories.modal.form.meal\">Meal description</label><input type=\"text\" class=\"form-control\" id=\"meal\" placeholder=\"{{\\'calories.modal.form.meal.placeholder\\'| translate}}\" ng-model=\"vm.credentials.description\" ng-required=\"true\"></div><!-- The number of calories --><div class=\"form-group\"><label for=\"calories\" data-translate=\"calories.modal.form.calories\">Number of calories</label><input type=\"number\" class=\"form-control\" id=\"calories\" placeholder=\"{{\\'calories.modal.form.calories.placeholder\\'| translate}}\" ng-model=\"vm.credentials.calories\" min=\"0\" required></div><!-- The date --><div class=\"form-group\"><label for=\"date\" data-translate=\"calories.modal.form.date\">Date</label><input type=\"date\" class=\"form-control\" id=\"date\" placeholder=\"{{\\'calories.modal.form.date.placeholder\\'| translate}}\" ng-model=\"vm.credentials.date\" required></div><!-- The time --><div class=\"form-group\"><label for=\"time\" data-translate=\"calories.modal.form.time\">Time</label><input type=\"time\" class=\"form-control\" id=\"time\" placeholder=\"{{\\'calories.modal.form.time.placeholder\\'| translate}}\" ng-model=\"vm.credentials.time\" required></div><button type=\"submit\" class=\"btn btn-raised btn-primary btn-block\" data-translate=\"calories.modal.form.button\">Save</button></form></div></div></div>');\n$templateCache.put('app/components/login/login.html','<div class=\"modal-body login-container\"><div class=\"row\"><!-- Page presentation --><div class=\"common-form-block\"><h1 data-translate=\"home.title\">Welcome to Caloapp !</h1><p class=\"lead\" data-translate=\"home.subtitle\">Sign in to enjoy our services &#128512;</p></div><!-- Error message --><div class=\"common-form-block\"><div class=\"alert alert-danger\" ng-show=\"vm.authenticationError\" data-translate=\"login.messages.error.authentication\"><strong>Failed to sign in!</strong> Please check your credentials and try again.</div></div><!-- The login block --><div class=\"common-form-block\"><form class=\"form\" role=\"form\" ng-submit=\"vm.login($event)\"><!-- User name --><div class=\"form-group\"><label for=\"username\" data-translate=\"global.form.username\">Login</label><input type=\"text\" class=\"form-control\" id=\"username\" placeholder=\"{{\\'global.form.username.placeholder\\'| translate}}\" ng-model=\"vm.username\"></div><!-- Password --><div class=\"form-group\"><label for=\"password\" data-translate=\"login.form.password\">Password</label><input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"{{\\'login.form.password.placeholder\\'| translate}}\" ng-model=\"vm.password\"></div><!-- Remember me --><div class=\"form-group\"><label for=\"rememberMe\"><input type=\"checkbox\" id=\"rememberMe\" ng-model=\"vm.rememberMe\" checked=\"checked\"> <span data-translate=\"login.form.rememberme\">Remember me</span></label></div><!-- Submission button --> <button type=\"submit\" class=\"btn btn-raised btn-primary btn-block\" data-translatelogin=\"login.form.button\">Sign in</button></form><p></p><!-- Forgot password link --><div class=\"forgot-password\"><a class=\"\" href=\"\" ng-click=\"vm.requestResetPassword()\" data-translate=\"login.password.forgot\">Did you forget your password?</a></div><!-- Register new account link --><div class=\"new-account\" data-translate=\"global.messages.info.register\" translate-compile>You don\\'t have an account yet? <a class=\"\" href=\"\" ng-click=\"vm.register()\">Register a new account</a></div></div></div></div>');\n$templateCache.put('app/layouts/error/accessdenied.html','<div ng-cloak><div class=\"row\"><div class=\"col-md-4\"><span class=\"hipster img-responsive img-rounded\"></span></div><div class=\"col-md-8\"><h1 data-translate=\"error.title\">Error Page!</h1><div class=\"alert alert-danger\" data-translate=\"error.403\">You are not authorized to access the page.</div></div></div></div>');\n$templateCache.put('app/layouts/error/error.html','<div ng-cloak><div class=\"row\"><div class=\"col-md-4\"><span class=\"hipster img-responsive img-rounded\"></span></div><div class=\"col-md-8\"><h1 data-translate=\"error.title\">Error Page!</h1><div ng-show=\"errorMessage\"><div class=\"alert alert-danger\">{{errorMessage}}</div></div></div></div></div>');\n$templateCache.put('app/layouts/navbar/navbar.html','<nav class=\"navbar navbar-default\" role=\"navigation\"><div class=\"container\"><div class=\"navbar-header\"><button type=\"button\" class=\"navbar-toggle\" ng-click=\"vm.toggleNavbar()\"><span class=\"sr-only\">Toggle navigation</span> <span class=\"icon-bar\"></span> <span class=\"icon-bar\"></span> <span class=\"icon-bar\"></span></button><!-- Calo app banner --> <a class=\"navbar-brand logo\" ng-click=\"vm.goHome();vm.collapseNavbar()\"><img class=\"logo-img\" src=\"content/images/logo-jhipster.png\" alt=\"logo\"> <span data-translate=\"global.title\">Caloapp</span><!--<span class=\"navbar-version\">v{{VERSION}}</span>--></a></div><div class=\"navbar-collapse\" uib-collapse=\"vm.isNavbarCollapsed\" ng-switch=\"vm.isAuthenticated()\"><ul class=\"nav navbar-nav navbar-right\"><!-- Administration button --><li ng-class=\"{\\n                                active: vm.$state.includes(\\'admin\\')\\n                            }\" ng-switch-when=\"true\" has-any-authority=\"ROLE_ADMIN,ROLE_USERS_MANAGER\" uib-dropdown dropdown><a ui-sref=\"user-management\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-tower\"></span> <span class=\"hidden-sm\" data-translate=\"global.menu.admin.main\">Administration</span></a></li><!-- Calories button --><li has-authority=\"ROLE_USER\" ui-sref-active=\"active\" ng-switch-when=\"true\"><a ng-click=\"vm.goToMyCalories();vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-heart\"></span> <span class=\"hidden-sm\" data-translate=\"global.menu.myCalories\">My calories</span></a></li><!-- Account menu --><li ng-show=\"vm.isAuthenticated()\" ng-class=\"{\\n                                active: vm.$state.includes(\\'account\\')\\n                            }\" uib-dropdown dropdown><!-- Account button --> <a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" id=\"account-menu\"><span><span class=\"glyphicon glyphicon-user\"></span> <span class=\"hidden-sm\" data-translate=\"global.menu.account.main\">Account </span><b class=\"caret\"></b></span></a><ul class=\"dropdown-menu\" uib-dropdown-menu><!-- Account settings --><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a ui-sref=\"settings\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-wrench\"></span>&nbsp; <span data-translate=\"global.menu.account.settings\">Settings</span></a></li><!-- Change password --><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a ui-sref=\"password\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-lock\"></span>&nbsp; <span data-translate=\"global.menu.account.password\">Password</span></a></li><!-- Log out --><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a href=\"\" ng-click=\"vm.logout()\" id=\"logout\"><span class=\"glyphicon glyphicon-log-out\"></span>&nbsp; <span data-translate=\"global.menu.account.logout\">Sign out</span></a></li></ul></li><!-- Change language --><li ui-sref-active=\"active\" uib-dropdown dropdown ng-controller=\"JhiLanguageController as languageVm\"><a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" ng-if=\"languageVm.languages.length > 1\"><span><span class=\"glyphicon glyphicon-flag\"></span> <span class=\"hidden-sm\" data-translate=\"global.menu.language\">Language</span> <b class=\"caret\"></b></span></a><ul class=\"dropdown-menu\" uib-dropdown-menu ng-if=\"languageVm.languages.length > 1\"><li active-menu=\"{{language}}\" ng-repeat=\"language in languageVm.languages\"><a href=\"\" ng-click=\"languageVm.changeLanguage(language);vm.collapseNavbar();\">{{language| findLanguageFromKey}}</a></li></ul></li></ul></div></div></nav>');\n$templateCache.put('app/account/reset/finish/reset.finish.html','<div><div class=\"row\"><div class=\"col-md-4 col-md-offset-4\"><h1 data-translate=\"reset.finish.title\">Reset password</h1><div class=\"alert alert-danger\" data-translate=\"reset.finish.messages.keymissing\" ng-show=\"vm.keyMissing\"><strong>The password reset key is missing.</strong></div><div class=\"alert alert-warning\" ng-hide=\"vm.success || vm.keyMissing\"><p data-translate=\"reset.finish.messages.info\">Choose a new password</p></div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><p data-translate=\"reset.finish.messages.error\">Your password couldn\\'t be reset. Remember a password request is only valid for 24 hours.</p></div><div class=\"alert alert-success\" ng-show=\"vm.success\"><p data-translate=\"reset.finish.messages.success\" translate-compile><strong>Your password has been reset.</strong> Please <a class=\"alert-link\" href=\"\" ng-click=\"vm.login()\">sign in</a>.</p></div><div class=\"alert alert-danger\" ng-show=\"vm.doNotMatch\" data-translate=\"global.messages.error.dontmatch\">The password and its confirmation do not match!</div><div ng-hide=\"vm.keyMissing\"><form ng-show=\"!vm.success\" name=\"form\" role=\"form\" novalidate ng-submit=\"vm.finishReset()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"password\" data-translate=\"global.form.newpassword\">New password</label><input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"{{\\'global.form.newpassword.placeholder\\'| translate}}\" ng-model=\"vm.resetAccount.password\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.password.$dirty && form.password.$invalid\"><p class=\"help-block\" ng-show=\"form.password.$error.required\" data-translate=\"global.messages.validate.newpassword.required\">Your password is required.</p><p class=\"help-block\" ng-show=\"form.password.$error.minlength\" data-translate=\"global.messages.validate.newpassword.minlength\">Your password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.password.$error.maxlength\" data-translate=\"global.messages.validate.newpassword.maxlength\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\"vm.resetAccount.password\"></password-strength-bar></div><div class=\"form-group\"><label class=\"control-label\" for=\"confirmPassword\" data-translate=\"global.form.confirmpassword\">New password confirmation</label><input type=\"password\" class=\"form-control\" id=\"confirmPassword\" name=\"confirmPassword\" placeholder=\"{{\\'global.form.confirmpassword.placeholder\\'| translate}}\" ng-model=\"vm.confirmPassword\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.required\" data-translate=\"global.messages.validate.confirmpassword.required\">Your password confirmation is required.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.minlength\" data-translate=\"global.messages.validate.confirmpassword.minlength\">Your password confirmation is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.maxlength\" data-translate=\"global.messages.validate.confirmpassword.maxlength\">Your password confirmation cannot be longer than 50 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-raised btn-primary btn-block\" data-translate=\"reset.finish.form.button\">Reset Password</button></form></div></div></div></div>');\n$templateCache.put('app/account/reset/request/reset.request.html','<div class=\"reset-request-container\"><div class=\"row reset-request-row\"><div class=\"common-form-block\"><h1 data-translate=\"reset.request.title\">Reset your password</h1><div class=\"alert alert-danger\" data-translate=\"reset.request.messages.notfound\" ng-show=\"vm.errorEmailNotExists\"><strong>E-Mail address isn\\'t registered!</strong> Please check and try again.</div><div class=\"alert alert-warning\" ng-hide=\"vm.success\"><p data-translate=\"reset.request.messages.info\">Enter the e-mail address you used to register.</p></div><div class=\"alert alert-success\" ng-show=\"vm.success == \\'OK\\'\"><p data-translate=\"reset.request.messages.success\">Check your e-mails for details on how to reset your password.</p></div><form ng-show=\"!vm.success\" name=\"form\" role=\"form\" novalidate ng-submit=\"vm.requestReset()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"email\" data-translate=\"global.form.email\">E-mail</label><input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"{{\\'global.form.email.placeholder\\'| translate}}\" ng-model=\"vm.resetAccount.email\" ng-minlength=\"5\" ng-maxlength=\"100\" required><div ng-show=\"form.email.$dirty && form.email.$invalid\"><p class=\"help-block\" ng-show=\"form.email.$error.required\" data-translate=\"global.messages.validate.email.required\">Your e-mail is required.</p><p class=\"help-block\" ng-show=\"form.email.$error.email\" data-translate=\"global.messages.validate.email.invalid\">Your e-mail is invalid.</p><p class=\"help-block\" ng-show=\"form.email.$error.minlength\" data-translate=\"global.messages.validate.email.minlength\">Your e-mail is required to be at least 5 characters.</p><p class=\"help-block\" ng-show=\"form.email.$error.maxlength\" data-translate=\"global.messages.validate.email.maxlength\">Your e-mail cannot be longer than 100 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-raised btn-primary btn-block\" data-translate=\"reset.request.form.button\">Reset</button></form></div></div></div>');}]);})();"],"sourceRoot":"/source/"}